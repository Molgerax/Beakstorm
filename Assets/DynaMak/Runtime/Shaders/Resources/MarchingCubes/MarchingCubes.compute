//Kernels
#pragma kernel March
#pragma kernel TrianglesToMeshBuffers

#pragma multi_compile _ HALF4

#include "../VolumeUtility.hlsl"
#include "MarchingTable.hlsl"

#define ThreadBlockSize 2
#define EPSILON 1e-3


struct Triangle
{
    float3 v0;
    float3 v1;
    float3 v2;
    float3 n0;
    float3 n1;
    float3 n2;
};

float _SurfaceLevel;
bool _FillEdge;
bool _Invert;

uint3 _MarchResolution;
float3 _MarchBounds;
float3 _MarchCenter;


#if HALF4
Texture3D<half4> _VolumeTexture;
#else
Texture3D<half> _VolumeTexture;
#endif

AppendStructuredBuffer<Triangle> _TriangleBuffer;

//Only needed for transfer from GPU to CPU, which is bad bad performance
uint _TriangleCount;
StructuredBuffer<Triangle> _TriangleRead;
RWStructuredBuffer<float3> _VertexBuffer;
RWStructuredBuffer<int> _IndexBuffer;



// --------------- Helper Functions --------------------------

float3 interpolateVerts(float4 v0, float4 v1)
{
    float t = (_SurfaceLevel - v0.w) / (v1.w - v0.w);
    return v0.xyz + t * (v1.xyz - v0.xyz);
}

inline float3 CubeSize(uint3 resolution, float3 bounds)
{
    return 2 * bounds / float3( resolution - 2 );
}


float4 CubeCorner(uint3 id, uint3 offset)
{
#if HALF4
    return float4(
        WorldPosFromId(id + offset, _MarchResolution - 1, _MarchCenter, _MarchBounds),
        (_FillEdge && (
            id.x + offset.x == 0 || id.y + offset.y == 0 || id.z + offset.z == 0 ||
            id.x + offset.x == _MarchResolution.x - 2 || id.y + offset.y == _MarchResolution.y - 2 || id.z + offset.z == _MarchResolution.z - 2)) ?
            _SurfaceLevel - 0.01 : _VolumeTexture[id + offset].w);
#else
    return float4(
        WorldPosFromId(id + offset, _MarchResolution - 1, _MarchCenter, _MarchBounds),
        (_FillEdge && (
            id.x + offset.x == 0 || id.y + offset.y == 0 || id.z + offset.z == 0 ||
            id.x + offset.x == _MarchResolution.x - 2 || id.y + offset.y == _MarchResolution.y - 2 || id.z + offset.z == _MarchResolution.z - 2)) ?
            _SurfaceLevel - 0.01 : _VolumeTexture[id + offset]);
#endif
}

half SampleVolumeAtWorldPos(float3 worldPos)
{
#if HALF4
    return Sample_Volume(_VolumeTexture, _MarchCenter, _MarchBounds, worldPos).w;
#else
    return Sample_Volume(_VolumeTexture, _MarchCenter, _MarchBounds, worldPos);
#endif
}

float3 sampleNormal(float3 pos, float3 derivative)
{
    float2 offset = float2(1, 0);
    
    float dx = SampleVolumeAtWorldPos( pos + offset.xyy  * derivative ) - SampleVolumeAtWorldPos( pos - offset.xyy  * derivative);
    float dy = SampleVolumeAtWorldPos( pos + offset.yxy  * derivative ) - SampleVolumeAtWorldPos( pos - offset.yxy  * derivative);
    float dz = SampleVolumeAtWorldPos( pos + offset.yyx  * derivative ) - SampleVolumeAtWorldPos( pos - offset.yyx  * derivative);
    return normalize(float3(dx,dy,dz));
}

void GetCubeIndexFromCorner(inout int cubeIndex, float4 cubeCorner, uint powerOfTwo)
{
    if ((cubeCorner.w < _SurfaceLevel && !_Invert) || (cubeCorner.w > _SurfaceLevel && _Invert)) cubeIndex |= powerOfTwo;
}

int GetCubeIndexFromCorners(float4 cubeCorners[8])
{
    int cubeIndex = 0;
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[0], 1);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[1], 2);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[2], 4);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[3], 8);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[4], 16);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[5], 32);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[6], 64);
    GetCubeIndexFromCorner(cubeIndex, cubeCorners[7], 128);
    return cubeIndex;
}


// --------------- Kernels ---------------------------------

//Used when Marching Volume == Input Volume
[numthreads(ThreadBlockSize, ThreadBlockSize, ThreadBlockSize)]
void March (uint3 id : SV_DispatchThreadID)
{
    //Number of cubes is -1 on each axis of the number of voxels to sample
    if (id.x >= _MarchResolution.x - 1 || id.y >= _MarchResolution.y - 1 || id.z >= _MarchResolution.z - 1 )
        return;
    
    float4 cubeCorners[8] =
    {
        CubeCorner(id, uint3(0,0,0)),
        CubeCorner(id, uint3(1,0,0)),
        CubeCorner(id, uint3(1,0,1)),
        CubeCorner(id, uint3(0,0,1)),
        CubeCorner(id, uint3(0,1,0)),
        CubeCorner(id, uint3(1,1,0)),
        CubeCorner(id, uint3(1,1,1)),
        CubeCorner(id, uint3(0,1,1))
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    uint cubeIndex = GetCubeIndexFromCorners(cubeCorners);

    int normalFlip = 2 * _Invert - 1;

    float3 cellSize = CellSize(_MarchResolution, _MarchBounds); 
    
    //Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.v0 = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.v1 = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.v2 = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);

        tri.n0 = sampleNormal(tri.v0, cellSize * 1) * normalFlip;
        tri.n1 = sampleNormal(tri.v1, cellSize * 1) * normalFlip;
        tri.n2 = sampleNormal(tri.v2, cellSize * 1) * normalFlip;
        
        _TriangleBuffer.Append(tri);
    }
}


[numthreads(256, 1, 1)]
void TrianglesToMeshBuffers (uint3 id : SV_DispatchThreadID)
{
    if(id.x < _TriangleCount)
    {
        int index = id.x;
    
        Triangle t = _TriangleRead[index];

        _VertexBuffer[index * 3 + 0] = t.v0;
        _VertexBuffer[index * 3 + 1] = t.v1;
        _VertexBuffer[index * 3 + 2] = t.v2;
    
        _IndexBuffer[index * 3 + 0] = index * 3 + 2;
        _IndexBuffer[index * 3 + 1] = index * 3 + 1;
        _IndexBuffer[index * 3 + 2] = index * 3 + 0;
    }
}
