#pragma kernel Initialize
#pragma kernel Iterate
#pragma kernel CombineInOut
#pragma kernel Swap
#pragma kernel CalculateNormals
#pragma kernel Empty

#define ThreadBlockSize 2

#include <HLSLSupport.cginc>
#include "../VolumeUtility.hlsl"

// Converts a Voxel Texture into a SDF Texture

Texture3D<half> _VoxelVolume;
uint3 _VoxelResolution;
float3 _VoxelCenter;
float3 _VoxelBounds;


RWTexture3D<half4> _SDFVolume_Write;
Texture3D<half4> _SDFVolume_Read;

Texture3D<half4> _SDFVolume_InnerField;


int _FlipSign;
int _MaxIterations;
int _Iteration;
int _Invert;


//------------- Kernels
[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Initialize (uint3 id : SV_DispatchThreadID)
{
    _SDFVolume_Write[id] = 0;

    half voxel = _VoxelVolume[id];

    float3 uv = VolumeUVsFromId(id, _VoxelResolution);

    half4 sdfSeed = 0;

    sdfSeed.a = 1 - step(voxel, 0);
    if(_FlipSign == 1) sdfSeed.a = 1 - sdfSeed.a;

    if(sdfSeed.a == 1) sdfSeed.rgb = uv;

    _SDFVolume_Write[id] = sdfSeed;
}


[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Iterate (uint3 id : SV_DispatchThreadID)
{ 
    float stepSize = _MaxIterations - (_Iteration + 1);
    stepSize = pow(2, stepSize);

    float3 uv = VolumeUVsFromId(id, _VoxelResolution);

    half4 input = _SDFVolume_Read.SampleLevel(sampler_point_clamp, uv, 0);

    half4 currPos = 0;
    half currDist = 10000.0;

    half4 finalPos = input;
    half finalDist = distance(uv, finalPos.rgb);

    UNITY_UNROLL
    for(int x = -1; x < 2; x++)
    {
        for(int y = -1; y < 2; y++)
        {
            for (int z = -1; z < 2; z++)
            {
                float3 offset = (uv + float3(x, y, z) / _VoxelResolution * stepSize);

                
                if(!WorldPosInsideVolume(_VoxelCenter, _VoxelBounds, offset))
                    currPos = half4((offset.xyz), _FlipSign);
                else
                    currPos = _SDFVolume_Read.SampleLevel(sampler_point_clamp, offset, 0 );
                
                
                currDist = distance(uv.xyz, currPos.rgb);
                
                if(currPos.a == 1.0 && (finalDist > currDist || finalPos.a != 1.0))
                {
                    finalPos = currPos;
                    finalDist = currDist;
                }
            }
        }
    }

    _SDFVolume_Write[id] = finalPos;
}


// Combines inner and outer fields
[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void CombineInOut (uint3 id : SV_DispatchThreadID)
{
    float3 uv = VolumeUVsFromId(id, _VoxelResolution);

    half4 input = _SDFVolume_Read[id];
    half4 innerField = _SDFVolume_InnerField[id];


    half3 outerDiff = (input.xyz - uv.xyz) * _VoxelBounds;
    half outerDist = length(outerDiff);
    half3 innerDiff = (innerField.xyz - uv.xyz) * _VoxelBounds;
    half innerDist = length(innerDiff);

    half totalDist = outerDist - innerDist;
    half3 totalDirection = outerDiff - innerDiff;

    half4 output = 0;

    int factor = lerp(1, -1, _Invert);
    
    output.rgb = normalize(totalDirection) * factor;
    output.a = totalDist * factor;


    _SDFVolume_Write[id] = output;
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Swap (uint3 id : SV_DispatchThreadID)
{
    _SDFVolume_Write[id] = _SDFVolume_Read[id];
}


[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void CalculateNormals (uint3 id : SV_DispatchThreadID)
{
    half4 d = _SDFVolume_Write[id.xyz];

    float3 normal = (GetGradient(_SDFVolume_Write, 2, id).xyz);
    if(length(normal) == 0) normal = float3(0, 1, 0);
    
    d.xyz = normalize(normal);
    
    _SDFVolume_Write[id.xyz] = d;
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Empty (uint3 id : SV_DispatchThreadID)
{
    _SDFVolume_Write[id] = half4(1, 0, 1, 1000);
}