#pragma kernel Clear
#pragma kernel Fill

#define ThreadBlockSize 2
#include <HLSLSupport.cginc>

// Converts a Slicemap into a 3D Texture
// Slicemap is of depth 256, so 4*2 pixels per stored depth value

RWTexture3D<fixed> _VoxelTexture;
RWTexture2D<uint> _SliceMap;


//------------- Kernels
[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    _VoxelTexture[id] = 0;

    uint2 texId = id.xz * uint2(4, 2);
    InterlockedMin(_SliceMap[texId + uint2(0,0)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(1,0)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(2,0)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(3,0)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(0,1)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(1,1)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(2,1)], (uint) 0);
    InterlockedMin(_SliceMap[texId + uint2(3,1)], (uint) 0); 
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Fill (uint3 id : SV_DispatchThreadID)
{ 
    uint2 texId = id.xz * uint2(4,2);
    uint depth = id.y % 32;
    uint depthIndex = id.y / 32;
    texId += uint2( depthIndex % 4, depthIndex / 4);

    uint slice = _SliceMap[texId];
    uint voxel = (slice >> depth) & 1u;
    fixed v = (fixed) voxel;
    
    _VoxelTexture[id] = v;    
}
