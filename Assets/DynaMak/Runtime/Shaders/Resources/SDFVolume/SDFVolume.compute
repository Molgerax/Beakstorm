// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RecalculateSDF
#pragma kernel CalculateNormals
#pragma kernel Reset

#include "../VolumeUtility.hlsl"
#include "../SDFUtility.hlsl"

#define ThreadBlockSize 2
#define EPSILON 1e-3

VOLUME(RWTexture3D<half4>, _SDF)

float _dt;


StructuredBuffer<Box> _BoxBuffer;
StructuredBuffer<Sphere> _SphereBuffer;
StructuredBuffer<Line> _LineBuffer;
StructuredBuffer<Torus> _TorusBuffer;
uint _BoxLength;
uint _SphereLength;
uint _LineLength;
uint _TorusLength;

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void RecalculateSDF (uint3 id : SV_DispatchThreadID)
{
    half4 d = _SDFVolume[id.xyz];
    float3 cellSize = CellSize(_SDFResolution, _SDFBounds);
    float3 worldPos = WorldPosFromVolumeUVs(_SDFCenter, _SDFBounds, VolumeUVsFromId(id, _SDFResolution)) + cellSize * 0.5;

    
    float newD = 10000;

    
    uint i;
    for (i = 0; i < _BoxLength; i++)
    {
        newD = min(newD, sdfBox(_BoxBuffer[i].center, _BoxBuffer[i].bounds, _BoxBuffer[i].xAxis, _BoxBuffer[i].yAxis, worldPos));
    }
    
    for (i = 0; i < _SphereLength; i++)
    {
        newD = min(newD, sdfSphere(_SphereBuffer[i].center, _SphereBuffer[i].radius, worldPos));
    }

    for (i = 0; i < _LineLength; i++)
    {
        newD = min(newD, sdfLine(_LineBuffer[i].pointA, _LineBuffer[i].pointB, _LineBuffer[i].radius, worldPos));
    }

    for (i = 0; i < _TorusLength; i++)
    {
        newD = min(newD, sdfTorus(_TorusBuffer[i].center, _TorusBuffer[i].normal, _TorusBuffer[i].radius, _TorusBuffer[i].thickness, worldPos));
    }

    //Subtracts sphere from the field
    //newD = max(newD, -sdfSphere(float3(0, 10, 0), 2, worldPos));
  
    d.w = newD;
    _SDFVolume[id.xyz] = d;
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void CalculateNormals (uint3 id : SV_DispatchThreadID)
{
    half4 d = _SDFVolume[id.xyz];

    float3 normal = (GetGradient(_SDFVolume, 2, id).xyz);
    if(length(normal) == 0) normal = float3(0, 1, 0);
    
    d.xyz = normalize(normal);
    
    _SDFVolume[id.xyz] = d;
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Reset (uint3 id : SV_DispatchThreadID)
{
    _SDFVolume[id.xyz] = half4(0, 0, 0, 0);
}
