#pragma kernel Add

#include "../FluidFieldOperator.hlsl"
#include "../../Commons.cginc"

// Properties
Texture3D<half4> _SDFVolume;
float3 _SDFCenter;
float3 _SDFBounds;


int _Mirror;
float4 _MinMaxSurface;

int _Falloff;
// Linear = 0, SmoothStep = 1, Quadratic = 2

float _AddDensity;
float _AddStrength;


half falloff(half a, half b, half x)
{
    return lerp4(linearStep(a,b,x), smoothstep(a,b,x), quadraticStep(a,b,x), quarticStep(a,b,x), 1, _Falloff);
}

inline half falloffCut(half a, half b, half x)
{
    return falloff(a, b, x) * withinRange(a,b,x);
}

half falloffMirrored(half a, half b, half t)
{
    half interval = abs(a-b) * 0.5; 
    return falloffCut(a,a+interval, t) + falloffCut(b,b-interval, t);
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Add (uint3 id : SV_DispatchThreadID)
{

    float3 worldPos = WorldPosFromId(id, _FluidResolution, _FluidCenter, _FluidBounds);
    half4 sdfSample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, worldPos);

    if(!WorldPosInsideVolume(_SDFCenter, _SDFBounds, worldPos))
        return;
    
    half sdfVal = sdfSample.a;

    half distanceRamp = falloffCut(_MinMaxSurface.y, _MinMaxSurface.x, sdfVal);
    if(_Mirror == 1) distanceRamp = falloffMirrored(_MinMaxSurface.x, _MinMaxSurface.y, sdfVal);
    
    half4 f = _FluidVolume[id.xyz];
    if(distanceRamp > 0)
    {
        distanceRamp = saturate(distanceRamp);

        half addDensity = distanceRamp * _AddDensity * _dt;

        half3 sdfNormal = sdfSample.xyz ;
        
        half3 addVelocity = 0;
        if(dot(sdfNormal, sdfNormal) > 0)
        {
            addVelocity = normalize(sdfNormal) * _AddStrength * _dt * distanceRamp;

            //addVelocity += half3(0, -0.1,0) * _dt;
        }
        
        f.xyz += addVelocity;
        f.w += addDensity;
    }
    
    _FluidVolume[id.xyz] = f;
}