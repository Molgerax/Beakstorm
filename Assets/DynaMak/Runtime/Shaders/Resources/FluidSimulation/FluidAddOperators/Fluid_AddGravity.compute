#pragma kernel Add

#include "../FluidFieldOperator.hlsl"

#pragma multi_compile _ SDF_ON

float3 _AddDirection;
float _AddStrength;
float _MaxStrength;
float _UseWeight;


#if SDF_ON
float _Surface;
VOLUME(Texture3D<half4>, _SDF)
#endif


[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Add (uint3 id : SV_DispatchThreadID)
{
    half4 f = _FluidVolume[id.xyz];
    float3 worldPos = WorldPosFromId(id, _FluidResolution, _FluidCenter, _FluidBounds);

    float mask = 1;
    float weight = lerp(1, f.w, _UseWeight);

    float3 addDirection = sign(_AddStrength) * _AddDirection;
    float addStrength = abs(_AddStrength) * _dt;
    
    float3 normalDir = 0;
    float goingToSurface = 0;

    #if SDF_ON
    float surface = 0;
    float surfaceMax = _Surface;
    float4 sample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, worldPos);
    normalDir = sample.xyz * sample.w;
    goingToSurface = min(saturate(dot(f.xyz, -sample.xyz)), sample.w);
    //addStrength = max(0, addStrength - max(0, dot(f.xyz, -sample.xyz * sample.w)));
    mask = smoothstep(sample.w, max(surfaceMax, surface + 0.0001), surface);
    //mask = step(surface, sample.w);
    //f.xyz *= mask;
    #endif

    addStrength = max(0, addStrength - goingToSurface);
    
    float strengthInDirection = max(0, dot(addDirection, f.xyz));
    
    //float addStrength = sign(_AddStrength) * clamp(abs(_AddStrength * _dt), 0, max(0, _MaxStrength - strengthInDirection));
    addStrength = lerp(
        clamp( addStrength, 0, max(0, _MaxStrength - strengthInDirection)),
        _AddStrength,
        step(_MaxStrength, 0));
    
    float3 addVel = _AddDirection *  addStrength * mask * weight;

    f.xyz += addVel;
    _FluidVolume[id.xyz] = f;

}