#pragma kernel Diffuse

#include "FluidFieldOperator.hlsl"

float _DiffusionFactor;
float _DiffuseVelocity;

float sum(float3 v)
{
    return v.x + v.y + v.z;
}

[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void Diffuse (uint3 id : SV_DispatchThreadID)
{
    if( id.x < _FluidResolution.x && id.y < _FluidResolution.y && id.z < _FluidResolution.z)
    {
        half4 f = _FluidVolume[id.xyz];
        half4 d0 = f;
        half4 d_X = d0;
        
        half4 dx0  = _FluidVolume[id.xyz - uint3(1, 0, 0)];
        half4 dx1  = _FluidVolume[id.xyz + uint3(1, 0, 0)];
        half4 dy0  = _FluidVolume[id.xyz - uint3(0, 1, 0)];
        half4 dy1  = _FluidVolume[id.xyz + uint3(0, 1, 0)];
        half4 dz0  = _FluidVolume[id.xyz - uint3(0, 0, 1)];
        half4 dz1  = _FluidVolume[id.xyz + uint3(0, 0, 1)];

        float3 factorMin = 1 - step(id.xyz, 0);
        float3 factorMax = 1 - step(_FluidResolution.xyz, id.xyz - 1);
        
        d_X = (d0 + _DiffusionFactor * _dt * (dx0 + dx1 + dy0 + dy1 + dz0 + dz1)) / (1 + 6 * _DiffusionFactor * _dt);

        float4 d_X_New = (d0 + _DiffusionFactor * _dt * (
            dx0 * factorMin.x + dx1 * factorMax.x +
            dy0 * factorMin.y + dy1 * factorMax.y +
            dz0 * factorMin.z + dz1 * factorMax.z)) / (1 + (sum(factorMin) + sum(factorMax)) * _DiffusionFactor * _dt);

        half4 mask = half4(_DiffuseVelocity.xxx, 1);
        f = lerp(f, d_X_New, mask);
        
        _FluidVolume[id.xyz] = f;
    }
}