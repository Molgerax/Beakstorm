#pragma kernel VelocityBoundarySDF

#include "FluidFieldOperator.hlsl"

VOLUME(Texture3D<half4>, _SDF)
float _Rebound;


inline float3 reflectOnce(float3 i, float3 n)
{
    return lerp( reflect(i,n) ,i, step(0, dot(i, n) ));
}

float3 adjust(float3 i, float3 n, float t)
{
    return normalize(i + n * t) * length(i);
}



[numthreads(ThreadBlockSize,ThreadBlockSize,ThreadBlockSize)]
void VelocityBoundarySDF (uint3 id : SV_DispatchThreadID)
{
    half4 f = _FluidVolume[id.xyz];
    half3 vel = f.xyz;

    float3 worldPos = WorldPosFromId(id, _FluidResolution, _FluidCenter, _FluidBounds);
    half4 sdfSample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, worldPos);
    
    float3 cellSize = CellSize(_FluidResolution, _FluidBounds);
    float distThreshold = dot(sdfSample.xyz, cellSize); 
    
    if(sdfSample.w < distThreshold)
    {
        vel = reflectOnce(vel, sdfSample.xyz);
        
        if(sdfSample.w < 0)
        {
            f.w *= 0.1;// saturate(1 - sdfSample.w);
            vel = sdfSample.xyz * length(vel) * _Rebound;
            //vel = adjust(vel, sdfSample.xyz, abs(sdfSample.w));
        }
    }
    
    f.xyz = vel;
    _FluidVolume[id.xyz] = f;
}