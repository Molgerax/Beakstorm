#pragma kernel InitializeKernel
#pragma kernel UpdateKernel
#pragma kernel RenderKernel
#pragma kernel KillKernel
#pragma kernel EmitKernel
#pragma kernel EmissionCountKernel

#pragma multi_compile _ PARTICLE_PONG_BUFFER

// Must contain a Particle definition, which must at least contain 'bool alive'
#define PARTICLE_STRUCT Particle
#include <HLSLSupport.cginc>

struct PARTICLE_STRUCT
{
    bool alive;
    float3 position;        //current position
    float3 normal;
    float3 tangent;

    float3 rootOffset;
};

//#define PARTICLE_PONG_BUFFER

#include "../ParticleTemplate.hlsl"
#include "../ParticleUtility.hlsl"
#include "../ParticleRenderUtility.hlsl"

#include "../../VolumeUtility.hlsl"
#include "../../MeshUtility.hlsl"

#include "../../ExternalLibraries/BitangentNoise.hlsl"


//
//  ---- PROPERTIES ----
//

float _Length;
float _Radius;

EMISSION_PROPERTIES_START

SKINNED_MESH(_Mesh)
float _RootMotion;

EMISSION_PROPERTIES_END




//
//  ---- FUNCTIONS ----
//


// Standard kernels to initialize and kill particles.
INITIALIZE
KILL

UPDATE
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(p.alive)
    {
        uint clampedIndex = index % _MeshBoneCount;

        float4x4 mat = _MeshBoneMatrices[clampedIndex];

        p.position = mul(mat, float4(0,0,0,1)).xyz;
        p.normal = mul(mat, float4(0,1,0,0)).xyz;
        p.tangent = mul(mat, float4(0,0,1,0)).xyz;
    }

    SetParticle(index, p);
}

RENDER
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(!p.alive) return;
    
    float radius = _Radius;
    
    float3 tangent = p.tangent;
    
    RenderVertex front, center, back = (RenderVertex)0;

    center.positionWS = p.position;
    center.normalWS = p.normal;
    center.tangentWS = float4(-normalize(tangent), 1);
    center.uv = 0;
    center.color = 0.5 + 0.5 * float4(p.normal, 1);
    
    front = center;
    front.positionWS += front.normalWS * _Length;

    Add_Tube4Cap(center, front, radius);


    center.normalWS *= -1;
    back = center;
    back.tangentWS.xyz *= 1;
    back.positionWS += back.normalWS * radius;

    Add_Tube4Cap(center, back, radius);
}

SET_EMISSION_TO_DEADCOUNT

EMIT
{
    if (CurrentEmissionCount() < 1) return;
    
    const uint index = _AliveIndexBuffer.Consume();
    
    PARTICLE_STRUCT p = (PARTICLE_STRUCT)0;

    p.alive = true;

    uint clampedIndex = index % _MeshBoneCount;
    float4x4 mat = _MeshBoneMatrices[clampedIndex];

    p.position = mul(mat, float4(0,0,0,1)).xyz;
    p.normal = mul(mat, float4(0,1,0,0)).xyz;
    p.tangent = mul(mat, float4(0,0,1,0)).xyz;
    
    _ParticleBuffer[index] = p;
}

