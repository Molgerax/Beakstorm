#pragma kernel InitializeKernel
#pragma kernel UpdateKernel
#pragma kernel RenderKernel
#pragma kernel KillKernel
#pragma kernel EmitKernel
#pragma kernel EmissionCountKernel

#pragma multi_compile _ PARTICLE_PONG_BUFFER

// Must contain a Particle definition, which must at least contain 'bool alive'
#define PARTICLE_STRUCT Particle
struct PARTICLE_STRUCT
{
    bool alive;
    float3 position;        //current position
    float3 oldPosition;
    float3 normal;
    float3 tangent;

    float3 oldNormal;
    
    float size;
	
	int subMeshId;
    uint boneId;

    int isParented;
    float3 parentOffset;
    float3 parentNormal;
    float3 parentTangent;
    uint startVertex;
    uint vertexCount;
};

#include "HLSLSupport.cginc"
#include "../ParticleTemplate.hlsl"
#include "../ParticleUtility.hlsl"
#include "../ParticleRenderUtility.hlsl"

#include "../../VolumeUtility.hlsl"
#include "../../MeshUtility.hlsl"
#include "../../ExternalLibraries/BitangentNoise.hlsl"

float _Gravity;
float _CollisionBounce;
float _ParentOffset;
float _ExplodeForce;

int _Detach;
float3 _DetachPoint;

VOLUME(Texture3D<half4>, _SDF);
VOLUME(Texture3D<half4>, _Fluid);

FRACTURED_MESH(_FracturedMesh)
SKINNED_MESH(_SkinnedMesh)



bool Collide_SDF(inout float3 position, inout float3 oldPosition, float collisionBounce = 0.1, float size = 0)
{
    if(WorldPosInsideVolume(_SDFCenter, _SDFBounds, position) == false) return false;

    float4 sdfSample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, position);
    float sdfThickness = sdfSample.w - size;
    if(sdfThickness < 0)
    {
        float3 sdfNormal = normalize(sdfSample.xyz);
        float3 flattenVelocity = dot(position - oldPosition - sdfNormal * sdfThickness, - sdfNormal) * sdfNormal;
        float3 mostBounceVelocity = dot(position - oldPosition, sdfNormal) * sdfNormal;
           
        oldPosition = lerp(oldPosition - flattenVelocity, oldPosition + mostBounceVelocity, clamp(collisionBounce, 0, 1));
        position -= sdfSample.xyz * sdfThickness;
        oldPosition = Move_Towards(oldPosition, position, 0.01 * 0.016);
        return true;
    }
    return false;
}


uint2 PivotIndexFromId(uint id, uint textureSize)
{
    uint u = id / textureSize;
    uint v = id - (u * textureSize);
    return uint2( v, u);
}

uint GetTextureSideLength(Texture2D<float4> tex)
{
    uint width, height, depth, mipLevels;
    tex.GetDimensions(width, height);
    return width;
}

float3 RemapToBounds(float3 value01, float3 min, float3 max)
{
    return (value01) * (max - min) + min;
}

bool HasParent(PARTICLE_STRUCT p)
{
    return p.isParented > 0;
}

float3 Force_CurlNoise(PARTICLE_STRUCT p, float scale, float speedMultiplier)
{
    return BitangentNoise4D(float4(p.position.xyz * scale, _time * speedMultiplier)).xyz;
}

void Constrain_ToParent(inout PARTICLE_STRUCT p)
{
    if(HasParent(p) == false) return;

    PARTICLE_STRUCT parent = _ParticleBuffer[0];
    
    p.position = mul(_WorldMatrix, float4(p.parentOffset, 1)).xyz;

    float3 binormal = cross(parent.tangent, parent.normal);
    
    float4x4 rotMatrix = float4x4(
            parent.tangent, 0,
            parent.normal, 0,
            binormal, 0,
            0, 0, 0, 0);
    rotMatrix = transpose(rotMatrix);
    
    float3 newPos = _ParticleBuffer[0].position + mul(rotMatrix, float4(p.parentOffset, 0)).xyz;
    p.position = newPos;
    p.tangent = mul(rotMatrix, float4(1, 0, 0, 0)).xyz;
    p.normal = mul(rotMatrix, float4(0, 1, 0, 0)).xyz;
}


float3 ConstrainToSkinnedMesh(inout PARTICLE_STRUCT p)
{
    if(HasParent(p) == false) return p.position;
    
    float4x4 mat = mul(_SkinnedMeshWorldMatrixInverse, _SkinnedMeshBoneMatrices[p.boneId]);

    mat = (_SkinnedMeshBoneMatrices[p.boneId]);
    p.tangent = mul(mat, float4(p.parentTangent, 0)).xyz;
    p.normal = mul(mat, float4(p.parentNormal, 0)).xyz;
    return mul(mat, float4(p.parentOffset, 1)).xyz;
}


void BreakFromParent(inout PARTICLE_STRUCT p, uint index)
{
    
    if(_ParticleBuffer[0].isParented == 0 && _ParticleBuffer[0].alive && p.isParented == 1)
    {
        float randomSeed = Random( (float)(index * 5 + index + _time * 2.4 + _DeltaTime * 0.46 + dot(_WorldPosition, _WorldPositionOld + 3) * 13.4));
        
        p.isParented = 0;
        p.position += normalize(p.parentOffset) * randomSeed * _ExplodeForce * _DeltaTime;
    }
}

void BreakAway(inout PARTICLE_STRUCT p, uint index)
{
    float randomSeed = Random( (float)(index * 5 + index + _time * 2.4 + _DeltaTime * 0.46 + dot(_WorldPosition, _WorldPositionOld + 3) * 13.4));

    randomSeed = randomSeed * 0.5 + 0.5;
    randomSeed = -1;
    p.isParented = 0;
    p.oldPosition -= normalize(p.parentOffset) * randomSeed * _ExplodeForce * _DeltaTime;    
}

// Standard kernels to initialize and kill particles.
INIT
{
    const uint index = id.x; 
    if(index == 0)
    {
        PARTICLE_STRUCT p = (PARTICLE_STRUCT)0;
        p.alive = false;

        p.position = mul(_WorldMatrix, float4(0, _ParentOffset, 0, 1)).xyz;
        p.oldPosition = p.position;
        p.tangent = mul(_WorldMatrix, float4(1,0,0,0)).xyz;
        p.normal = mul(_WorldMatrix, float4(0,1,0,0)).xyz;

        p.size = 0;
        
        p.isParented = 2;
        p.parentOffset = float3(0,_ParentOffset,0);

        p.startVertex = 0;
        p.vertexCount = 0;
        
        _ParticleBuffer[index] = p;
    }
    
    _ParticleBuffer[index].alive = false; 
    _DeadIndexBuffer.Append( index ); 
}



KILL

UPDATE
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(p.alive)
    {   
        float3 velocity = (p.position - p.oldPosition) / _DeltaTime;


        p.oldPosition = p.position;
        p.position += velocity * _DeltaTime;

        float rotSpeed = 1 - dot(p.oldNormal, p.normal) * 0.5 - 0.5;
        float3 oldNormal = p.oldNormal;
        p.oldNormal = p.normal;

        float3 forceSum = 0;
        
        float randomSeed = Random( (float)(index * 5 + id.x + _time * 2.4 + _DeltaTime * 0.46 + dot(_WorldPosition, _WorldPositionOld + 3) * 13.4));
        

        forceSum += float3(0, 1, 0) * _Gravity;
        float3 cheapDrag = -velocity *2;
        forceSum += cheapDrag;

        forceSum += Force_CurlNoise(p, 3, 0.1) * 0.5;

        float4 fluidSample = Sample_Volume(_FluidVolume, _FluidCenter, _FluidBounds, p.position);

        p.position += forceSum * 0.5 * _DeltaTime * _DeltaTime;
    
        if(_Detach == 1)
        {
            if(index == 0 && p.isParented == 2)
            {
                p.isParented = 1;
            }
            else if(p.isParented == 1)
            {
                if(p.position.y < _DetachPoint.y)
                    BreakAway(p, index);
            }
        }
        
        if(index != 0)
        {
            BreakFromParent(p, index);
            //Constrain_ToParent(p);

            float3 targetPos = ConstrainToSkinnedMesh(p);

            float dist = distance(p.position, targetPos);
            
            p.position = Move_Towards(p.position, targetPos, saturate(1-fluidSample.a * 2) * dist * _DeltaTime);
            
            //p.position = ConstrainToSkinnedMesh(p);
        }
        else
        {
            if(p.isParented == 2)
            {
                float4x4 mat = _SkinnedMeshBoneMatrices[p.boneId];
                
                p.tangent = mul(mat, float4(1, 0, 0, 0)).xyz;
                p.normal = mul(mat, float4(0, 1, 0, 0)).xyz;
                p.position = mul(mat, float4(p.parentOffset, 1)).xyz;
            }
            if(p.isParented == 1 && rotSpeed > 0)
            {
                float3 newNorm = reflect(-oldNormal, p.normal);
                float3 binormal = cross(p.tangent, p.normal);
                p.normal = normalize(newNorm);
                p.tangent = normalize(cross(p.normal, binormal));
            }
        }
        
        if(Collide_SDF(p.position, p.oldPosition, _CollisionBounce * randomSeed, p.size * 0.5))
            p.isParented = 0;

        //Collision_PlaneY(p.position, p.oldPosition, 0, _CollisionBounce, 1);
    }

    SetParticle(index, p);
}

RENDER
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(!p.alive || p.vertexCount == 0) return;

    uint startVertex = p.startVertex;
    uint vertexCount = p.vertexCount;

    float totalLength = 0;

    for(uint i = 0; i < vertexCount; i++)
    {
        uint tri0 = GetByteAddressBuffer(_FracturedMeshIndexBuffer, (startVertex + i) * 3 + 2, 4, 0);
        uint tri1 = GetByteAddressBuffer(_FracturedMeshIndexBuffer, (startVertex + i) * 3 + 1, 4, 0);
        uint tri2 = GetByteAddressBuffer(_FracturedMeshIndexBuffer, (startVertex + i) * 3 + 0, 4, 0);

        float4 pos0 = GetVertexData(_FracturedMeshVertexBuffer, tri0,  _FracturedMeshVertexStride, 0);
        float4 pos1 = GetVertexData(_FracturedMeshVertexBuffer, tri1,  _FracturedMeshVertexStride, 0);
        float4 pos2 = GetVertexData(_FracturedMeshVertexBuffer, tri2,  _FracturedMeshVertexStride, 0);
        
        
        float4 norm0 = GetVertexData(_FracturedMeshVertexBuffer, tri0, _FracturedMeshVertexStride, 12);
        float4 norm1 = GetVertexData(_FracturedMeshVertexBuffer, tri1, _FracturedMeshVertexStride, 12);
        float4 norm2 = GetVertexData(_FracturedMeshVertexBuffer, tri2, _FracturedMeshVertexStride, 12);
        
        float4 tang0 = GetVertexData(_FracturedMeshVertexBuffer, tri0, _FracturedMeshVertexStride, 24);
        float4 tang1 = GetVertexData(_FracturedMeshVertexBuffer, tri1, _FracturedMeshVertexStride, 24);
        float4 tang2 = GetVertexData(_FracturedMeshVertexBuffer, tri2, _FracturedMeshVertexStride, 24);

        float2 uv0 = GetVertexData(_FracturedMeshVertexBuffer, tri0, _FracturedMeshVertexStride, 40).xy;
        float2 uv1 = GetVertexData(_FracturedMeshVertexBuffer, tri1, _FracturedMeshVertexStride, 40).xy;
        float2 uv2 = GetVertexData(_FracturedMeshVertexBuffer, tri2, _FracturedMeshVertexStride, 40).xy;
        

        RenderTri tri = (RenderTri)0;

        totalLength += dot(pos0, pos0);
        totalLength += dot(pos1, pos1);
        totalLength += dot(pos2, pos2);

        float3 binormal = cross(p.tangent, p.normal);
        
        float4x4 rotMatrix = float4x4(
            p.tangent, 0,
            p.normal, 0,
            binormal, 0,
            0, 0, 0, 1);

        rotMatrix = transpose(rotMatrix);

        //rotMatrix = float4x4(
        //    1,0,0,0,
        //    0,1,0,0,
        //    0,0,1,0,
        //    0,0,0,1);
        
        tri.v[0].positionWS = mul(rotMatrix, float4(pos0.xyz, 0)).xyz + p.position;
        tri.v[1].positionWS = mul(rotMatrix, float4(pos1.xyz, 0)).xyz + p.position;
        tri.v[2].positionWS = mul(rotMatrix, float4(pos2.xyz, 0)).xyz + p.position;

        float4 col = 1;

        tri.v[0].color = col;
        tri.v[1].color = col;
        tri.v[2].color = col;
        
        tri.v[0].normalWS = mul(rotMatrix, float4(norm0.xyz,0)).xyz;
        tri.v[1].normalWS = mul(rotMatrix, float4(norm1.xyz,0)).xyz;
        tri.v[2].normalWS = mul(rotMatrix, float4(norm2.xyz,0)).xyz;

        tri.v[0].tangentWS = float4(mul(rotMatrix, float4(tang0.xyz, 0)).xyz, 1);
        tri.v[1].tangentWS = float4(mul(rotMatrix, float4(tang1.xyz, 0)).xyz, 1);
        tri.v[2].tangentWS = float4(mul(rotMatrix, float4(tang2.xyz, 0)).xyz, 1);

        tri.v[0].uv = uv0;
        tri.v[1].uv = uv1;
        tri.v[2].uv = uv2;

        tri.subMeshId = p.subMeshId;
        
        Add_Render(tri);
    }

    totalLength /= vertexCount * 3;
    _ParticleBuffer[index].size = length(totalLength) * 0.5;
}


SET_EMISSION_TO_DEADCOUNT

EMIT
{
    const uint index = _AliveIndexBuffer.Consume();
    if(_ParticleBuffer[0].alive && index == 0) return;

    PARTICLE_STRUCT p = (PARTICLE_STRUCT)0;
    
    p.alive = true;

    float3 parentOffset = float3 (0, _ParentOffset, 0);
    
    if (index == 0)
    {
        p.position = mul(_WorldMatrix, float4(parentOffset, 1)).xyz;
        p.oldPosition = p.position;
        p.normal = mul(_WorldMatrix, float4(0,1,0,0)).xyz;
        p.tangent = mul(_WorldMatrix, float4(1,0,0,0)).xyz;

        p.oldNormal = p.normal;
        
        p.size = 0.2;
        
        p.isParented = 2;
        p.parentOffset = parentOffset;

        p.startVertex = 0;
        p.vertexCount = 0;
    

        _ParticleBuffer[index] = p;
        return;
    }

    uint textureWidth = GetTextureSideLength(_FracturedMeshIndexTex);
    uint idConvert = 1024 * 2;

    
    int3 pivotIndex = int3( PivotIndexFromId(index - 1, textureWidth), 0);
    float3 chunkPosition = _FracturedMeshPivotTex.Load(pivotIndex).rgb;
	float4 fullSample = _FracturedMeshPivotTex.Load(pivotIndex).rgba;
	
	int submeshId = fullSample.a * 32;
    
    chunkPosition = (chunkPosition - 0.5) * _FracturedMeshBoundsSize + _FracturedMeshBoundsCenter;
    

    chunkPosition.x *= -1;

    float3 worldPos = mul(_WorldMatrix, float4(chunkPosition, 1)).xyz;
    
    p.position = _WorldPosition + chunkPosition;
    p.oldPosition = p.position;
    p.normal = mul(_WorldMatrix, float4(0,1,0,0)).xyz;
    p.tangent = mul(_WorldMatrix, float4(1,0,0,0)).xyz;

    p.parentTangent = p.tangent;
    p.parentNormal = p.normal;

    p.oldNormal = p.normal;
    
    p.size = 0.0;
	p.subMeshId = submeshId;
    
    p.isParented = 1;
    p.parentOffset = chunkPosition - parentOffset;

    chunkPosition = mul(_SkinnedMeshWorldMatrix, float4(chunkPosition, 1)).xyz;


    float minDist = 100000;
    int boneId = 0;
    float4 zeroPos = float4(0,0,0,1);

    //zeroPos = mul(_SkinnedMeshWorldMatrixInverse, zeroPos);
    
    for(int iter = 0; iter < _SkinnedMeshBoneCount; iter++)
    {
        float3 newPos = mul((_SkinnedMeshBoneMatrices[iter]), zeroPos).xyz;

        //newPos = mul((_SkinnedMeshWorldMatrixInverse), float4(newPos,1));
        
        float newDist = distance(chunkPosition, newPos); 
        if(newDist < minDist)
        {
            minDist = newDist;
            boneId = iter;
        }
    }

    float4x4 mat = _SkinnedMeshBoneMatricesInverse[boneId];
    
    p.parentOffset = mul(mat, float4(chunkPosition, 1)).xyz;
    p.parentNormal = mul(mat, float4(0, 1, 0, 0)).xyz;
    p.parentTangent = mul(mat, float4(1, 0, 0, 0)).xyz;

    p.boneId = boneId;
    

// fit(@opinput0_P, detail(1, "boundsmin"), detail(1, "boundsmax"), 0.0, 1.0)
    
    
    

    float4 meshDataSample = _FracturedMeshIndexTex.Load(pivotIndex.xyz).rgba;
    p.startVertex = meshDataSample.r * idConvert * idConvert + meshDataSample.g * idConvert
                  + meshDataSample.b * idConvert * idConvert * idConvert;
    p.vertexCount = meshDataSample.a * idConvert;
    

    _ParticleBuffer[index] = p;
}

