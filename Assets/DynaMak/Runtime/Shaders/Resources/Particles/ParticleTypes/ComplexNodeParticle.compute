#pragma kernel InitializeKernel
#pragma kernel UpdateKernel
#pragma kernel RenderKernel
#pragma kernel KillKernel
#pragma kernel EmitKernel
#pragma kernel EmissionCountKernel

#pragma multi_compile _ PARTICLE_PONG_BUFFER

// Must contain a Particle definition, which must at least contain 'bool alive'
#define PARTICLE_STRUCT Particle
struct PARTICLE_STRUCT
{
    bool alive;
    float3 position;        //current position
    float3 oldPosition;
    float3 normal;
    float3 tangent;

    float3 rootOffset;
    
    float life;             //life expectancy 
    float age;              //time since emission
    float3 color;
    float size; 

    int chainSegmentIndex; // if -1, not in a chain. 0 is root node,
    uint parentIndex;
    uint childIndex;
};

//#define PARTICLE_PONG_BUFFER

#include "../ParticleTemplate.hlsl"
#include "../ParticleUtility.hlsl"
#include "../ParticleRenderUtility.hlsl"

#include "../../VolumeUtility.hlsl"
#include "../../ExternalLibraries/BitangentNoise.hlsl"


float _Gravity;
float _CollisionBounce;
float _Size;
float _ChainLength;
float _FluidStrength;

float _NoiseStrength;
float _NoiseScale;
float _NoiseSpeed;

VOLUME(Texture3D<half4>, _SDF)
VOLUME(Texture3D<half4>, _Fluid)


EMISSION_PROPERTIES_START

float _SpawnY;

EMISSION_PROPERTIES_END


PARTICLE_STRUCT Get_Parent(PARTICLE_STRUCT p)
{
    if(p.chainSegmentIndex > 0)
        return _ParticleBuffer[p.parentIndex];
    else
        return p;
}

bool HasParent(PARTICLE_STRUCT p)
{
    return p.chainSegmentIndex > 0;
}

uint Spawn_Child(PARTICLE_STRUCT child, uint parentID)
{
    const uint index = _AliveIndexBuffer.Consume();
    child.parentIndex = parentID;

    _ParticleBuffer[index] = child;
    return index;
}


void Render_ChainSegment(PARTICLE_STRUCT p, PARTICLE_STRUCT parent)
 {
     RenderVertex startV = (RenderVertex)0;
     startV.positionWS   = p.position;
     startV.normalWS     = p.normal;
     startV.tangentWS    = float4(p.tangent, 1);
     startV.color        = float4(p.color, 1);
     startV.uv           = 0;
 
     RenderVertex endV   = (RenderVertex)0;
     endV.positionWS     = parent.position;
     endV.normalWS       = parent.normal;
     endV.tangentWS      = float4(parent.tangent, 1);
     endV.color          = float4(parent.color, 1);
     endV.uv             = 1;
 
     Add_Tube4(startV, endV, p.size, parent.size);
 }

void Render_ChainStart(PARTICLE_STRUCT p)
{
    RenderVertex startV = (RenderVertex)0;
    startV.positionWS   = p.position;
    startV.normalWS     = p.normal;
    startV.tangentWS    = float4(p.tangent, 1);
    startV.color        = float4(p.color, 1);
    startV.uv           = 0;

    RenderVertex endV   = startV;
    endV.positionWS     += startV.normalWS * p.size;
    endV.uv             = 1;

    Add_Tube4Cap(startV, endV, p.size);
}



bool Collide_SDF(inout float3 position, inout float3 oldPosition, float collisionBounce = 0.1, float size = 0)
{
    if(WorldPosInsideVolume(_SDFCenter, _SDFBounds, position) == false) return false;
    
    float4 sdfSample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, position);
    float sdfThickness = sdfSample.w - size;
    if(sdfThickness < 0)
    {
        float3 sdfNormal = normalize(sdfSample.xyz);
        float3 flattenVelocity = dot(position - oldPosition - sdfNormal * sdfThickness, - sdfNormal) * sdfNormal;
        float3 mostBounceVelocity = dot(position - oldPosition, sdfNormal) * sdfNormal;
           
        oldPosition = lerp(oldPosition - flattenVelocity, oldPosition + mostBounceVelocity, clamp(collisionBounce, 0, 1));
        position -= sdfSample.xyz * sdfThickness;
    }
    return sdfThickness < 0;
}


float3 Force_FluidField(PARTICLE_STRUCT p)
{
    if(!WorldPosInsideVolume(_FluidCenter, _FluidBounds, p.position)) return 0;

    float4 fluidSample = Sample_Volume(_FluidVolume, _FluidCenter, _FluidBounds, p.position, true);
    return fluidSample.xyz;
}

float3 Force_CurlNoise(PARTICLE_STRUCT p, float3 fluid)
{
    return BitangentNoise4D(float4(p.position.xyz * _NoiseScale, _time * _NoiseSpeed * dot(fluid, fluid))).xyz;
}

void Constrain_ToRoot(inout PARTICLE_STRUCT p)
{
    p.position = mul(_WorldMatrix, float4(p.rootOffset, 1)).xyz;
    p.normal = mul(_WorldMatrix, float4(0,1,0,0)).xyz;
    p.tangent = mul(_WorldMatrix, float4(0,0,1,0)).xyz;
}

void Constrain_ToParent(inout PARTICLE_STRUCT p, PARTICLE_STRUCT parent)
{
    if(HasParent(p) == false) return;

    float dist_to_parent = distance(p.position, parent.position);
    if(dist_to_parent > _ChainLength)
    {
        float diff = dist_to_parent - _ChainLength;
        float3 cachePos = p.position;
        p.position = Move_Towards(p.position, parent.position, diff * 1);
        p.oldPosition += (p.position - cachePos) * 0.99;
    }
}
void Constrain_ToChild(inout PARTICLE_STRUCT p, PARTICLE_STRUCT child)
{
    if(p.childIndex == 0) return;
    if(HasParent(p) == false) return;
    if(p.chainSegmentIndex < 4) return;

    float dist_to_child = distance(p.position, child.position);
    if(dist_to_child > _ChainLength)
    {
        float diff = dist_to_child - _ChainLength;
        float3 cachePos = p.position;
        p.position = Move_Towards(p.position, child.position, diff * 1);
        p.oldPosition += (p.position - cachePos) * 0.99;
    }
}

void Constrain_Verlet(inout PARTICLE_STRUCT p, PARTICLE_STRUCT parent)
{
    //if(HasParent(p) == false) return;

    float dist_to_parent = distance(p.position, parent.position);
    float error = abs(dist_to_parent - _ChainLength);

    float3 changeDir = 0;
    
    if(dist_to_parent > _ChainLength)
    {
        changeDir = normalize(p.position - parent.position);
    }
    else if (dist_to_parent < _ChainLength)
    {
        changeDir = normalize(parent.position - p.position);   
    }
    float3 changeAmount = changeDir * error;

    if(HasParent(p)==true)
    {
        p.position -= changeAmount * 0.5;
        parent.position += changeAmount * 0.5;
    }
    else
    {
        p.position -= changeAmount;
    }
}

// Standard kernels to initialize and kill particles.
INITIALIZE
KILL

UPDATE
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(p.alive)
    {
        if(p.age + _DeltaTime >= p.life && p.life > 0)
        {
            p.alive = false;
            _DeadIndexBuffer.Append(index);
        }
        p.age += _DeltaTime;

        PARTICLE_STRUCT parent = Get_Parent(p);
        
        
        float3 velocity = (p.position - p.oldPosition) / _DeltaTime;

        p.oldPosition = p.position;
        p.position += velocity * _DeltaTime;

        if (HasParent(p))
        {
            if (parent.alive)
            {
                
            }
            else
            {
                // Decouple when parent is dead
                p.chainSegmentIndex = -1;
            }
        }

        float3 forceSum = 0;
        
        forceSum += float3(0, 1, 0) * _Gravity;
        float3 fluid = Force_FluidField(p)  * _FluidStrength;
        forceSum += fluid;

        forceSum += Force_CurlNoise(p, fluid) * _NoiseStrength * (1 + length(fluid));

        Constrain_ToParent(p, parent);

        //Constrain_Verlet(p, parent);

        if(HasParent(p))
        {
            float3 parentVelocity = (parent.position - parent.oldPosition) / _DeltaTime;
            float3 velocityDifference = velocity - parentVelocity;

            //Targeting the parent
            float3 positionDifference = p.position - parent.position;
            float positionDifferenceLength = length(positionDifference);
            float3 normalToParent = positionDifferenceLength == 0 ? parent.normal : positionDifference / positionDifferenceLength;


            p.normal = -normalToParent;
            p.tangent = parent.tangent;
            float3 tempBinormal = cross(p.tangent, p.normal);
            p.tangent = normalize(cross(p.normal, tempBinormal));
            
            p.position += forceSum * 0.5 * _DeltaTime * _DeltaTime;
        }
        else
        {
            Constrain_ToRoot(p);
        }

        
        
        Collide_SDF(p.position, p.oldPosition, _CollisionBounce, p.size * 2);
        Collision_PlaneY(p.position, p.oldPosition, -100, _CollisionBounce, p.size);
    }

    SetParticle(index, p);
}

RENDER
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(!p.alive) return;
    
    if(HasParent(p))
    {
        Render_ChainSegment(p, Get_Parent(p));
    }
    else
    {
        Render_ChainStart(p);
    }
}

SET_EMISSION_TO_DEADCOUNT

EMIT
{
    if (CurrentEmissionCount() < 1) return;
    
    const uint index = _AliveIndexBuffer.Consume();
    
    PARTICLE_STRUCT p = (PARTICLE_STRUCT)0;

    float randomSeed = Random( (float)(index * 2 + groupId.x * 0.31 + _time + _DeltaTime + dot(_WorldPosition, _WorldPositionOld + 3) * 13.4));
    
    p.alive = true;

    float3 offset = RandomVector(randomSeed + 1);
    p.rootOffset = offset;
    
    p.position = offset + _WorldPosition + GetInterpolatedLocation(_WorldPosition, _WorldPositionOld, randomSeed);
    p.oldPosition = p.position - GetInheritedVelocity(_WorldPosition, _WorldPositionOld, 1, _DeltaTime, randomSeed);
    p.normal = mul(_WorldMatrix, float4(0,1,0,0)).xyz;
    p.tangent = mul(_WorldMatrix, float4(0,0,1,0)).xyz;

    p.life = 0;
    p.age = 0;
    p.color = float3(1,1,1);
    p.size = _Size;

    p.chainSegmentIndex = 0;
    p.parentIndex = 0;

    _ParticleBuffer[index] = p;

    uint parentID = index;
    uint temp = index;
    
    for (int i = 1; i < 32; i++ )
    {
        float gradient = 1.0 - (float)i / 32.0;
        
        PARTICLE_STRUCT child = p;
        child.parentIndex = parentID;
        child.chainSegmentIndex = i;

        child.position += -p.normal * 0.1;
        child.oldPosition = child.position;
        child.size = gradient * _Size;
        //child.color = gradient;

        p = child;
        
        parentID = Spawn_Child(child, parentID);       
        _ParticleBuffer[temp].childIndex = parentID;
        temp = parentID;
    }

}

