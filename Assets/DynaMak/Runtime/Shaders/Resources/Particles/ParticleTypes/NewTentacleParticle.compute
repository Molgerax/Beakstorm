#pragma kernel InitializeKernel
#pragma kernel UpdateKernel
#pragma kernel RenderKernel
#pragma kernel KillKernel
#pragma kernel EmitKernel
#pragma kernel EmissionCountKernel

#pragma multi_compile _ PARTICLE_PONG_BUFFER

// Must contain a Particle definition, which must at least contain 'bool alive'
#define PARTICLE_STRUCT Particle
#include <HLSLSupport.cginc>

struct PARTICLE_STRUCT
{
    bool alive;
    float3 position;        //current position
    float3 oldPosition;
    float oldDeltaTime;
    float3 normal;
    float3 tangent;

    float3 rootOffset;
    
    float life;             //life expectancy 
    float age;              //time since emission
    float3 color;
    float size;
    float chainLength;

    int chainSegmentIndex; // if -1, not in a chain. 0 is root node,
    uint parentIndex;

    int meshParent;
};

//#define PARTICLE_PONG_BUFFER

#include "../ParticleTemplate.hlsl"
#include "../ParticleUtility.hlsl"
#include "../ParticleRenderUtility.hlsl"

#include "../../VolumeUtility.hlsl"
#include "../../MeshUtility.hlsl"

#include "../../ExternalLibraries/BitangentNoise.hlsl"


//
//  ---- PROPERTIES ----
//

float _Gravity;
float _CollisionBounce;
float _Size;
float _ChainLength;
float _ChainYank;
float _ChainDamp;

float _NoiseStrength;
float _NoiseScale;
float _NoiseSpeed;

VOLUME(Texture3D<half4>, _SDF)
float _SDFSurface;

VOLUME(Texture3D<half4>, _Fluid)
float _FluidStrength;

float _WaveFrequency;
float _WaveCutoff;
TIME_ARRAY(_Wave);


fixed3 _WaveColor;
fixed3 _BaseColor;

EMISSION_PROPERTIES_START

SKINNED_MESH(_Mesh)

float _RootMotion;

Texture2D<float4> _SpawnTex_Head; uint _SpawnTex_HeadSubMeshIndex;
Texture2D<float4> _SpawnTex_Body; uint _SpawnTex_BodySubMeshIndex;

float _SpawnThreshold;

EMISSION_PROPERTIES_END




//
//  ---- FUNCTIONS ----
//


PARTICLE_STRUCT Get_Parent(PARTICLE_STRUCT p)
{
    if(p.chainSegmentIndex > 0)
        return _ParticleBuffer[p.parentIndex];
    else
        return p;
}

bool HasParent(PARTICLE_STRUCT p)
{
    return p.chainSegmentIndex > 0;
}

uint Spawn_Child(PARTICLE_STRUCT child, uint parentID)
{
    const uint index = _AliveIndexBuffer.Consume();
    child.parentIndex = parentID;

    _ParticleBuffer[index] = child;
    return index;
}

float GetTentacleLength(PARTICLE_STRUCT p)
{
    return (p.chainSegmentIndex) * p.chainLength * _ChainLength;
}


void Render_ChainSegment(PARTICLE_STRUCT p, PARTICLE_STRUCT parent)
 {
     RenderVertex startV = (RenderVertex)0;
     startV.positionWS   = p.position;
     startV.normalWS     = p.normal;
     startV.tangentWS    = float4(p.tangent, 1);
     startV.color        = float4(p.color, 1);
     startV.uv           = float2(0, p.chainSegmentIndex * p.chainLength);
 
     RenderVertex endV   = (RenderVertex)0;
     endV.positionWS     = parent.position;
     endV.normalWS       = parent.normal;
     endV.tangentWS      = float4(parent.tangent, 1);
     endV.color          = float4(parent.color, 1);
     endV.uv             = float2(0, parent.chainSegmentIndex * p.chainLength);
 
     Add_Tube8(startV, endV, p.size, parent.size);
 }

void Render_ChainStart(PARTICLE_STRUCT p)
{
    RenderVertex startV = (RenderVertex)0;
    startV.positionWS   = p.position;
    startV.normalWS     = p.normal;
    startV.tangentWS    = float4(p.tangent, 1);
    startV.color        = float4(p.color, 1);
    startV.uv           = float2(0, 0);

    RenderVertex endV   = startV;
    endV.positionWS     += startV.normalWS * p.size;
    endV.uv             = float2(0, 1);

    Add_Tube8Cap(startV, endV, p.size);
}



void Collide_SDF(inout float3 position, inout float3 oldPosition, float collisionBounce = 0.1, float size = 0)
{
    if(WorldPosInsideVolume(_SDFCenter, _SDFBounds, position) == false) return;
    
    float4 sdfSample = Sample_Volume(_SDFVolume, _SDFCenter, _SDFBounds, position);
    float sdfThickness = sdfSample.w - size - _SDFSurface;
    if(sdfThickness < 0)
    {
        float3 sdfNormal = normalize(sdfSample.xyz);
        float3 flattenVelocity = dot(position - oldPosition - sdfNormal * sdfThickness, - sdfNormal) * sdfNormal;
        float3 mostBounceVelocity = dot(position - oldPosition, sdfNormal) * sdfNormal;
           
        oldPosition = lerp(oldPosition - flattenVelocity, oldPosition + mostBounceVelocity, clamp(collisionBounce, 0, 1));
        position -= sdfSample.xyz * sdfThickness;
    }
}


float4 Force_FluidField(PARTICLE_STRUCT p)
{
    if(!WorldPosInsideVolume(_FluidCenter, _FluidBounds, p.position)) return 0;

    float4 fluidSample = Sample_Volume(_FluidVolume, _FluidCenter, _FluidBounds, p.position, true);
    return fluidSample;
}

float3 Force_CurlNoise(PARTICLE_STRUCT p, float scale, float speedMultiplier)
{
    return BitangentNoise4D(float4(p.position.xyz * scale, _time * _NoiseSpeed * speedMultiplier)).xyz;
}

void Constrain_ToRoot(inout PARTICLE_STRUCT p)
{

    GET_SKINNED_VERTEX_DATA(_Mesh, p.meshParent, pos, norm, tang)

    float4x4 mat = lerp(_MeshWorldMatrix, _WorldMatrix, _RootMotion);
    
    p.position = mul(mat, float4(pos, 1)).xyz;
    p.normal = normalize( mul(mat, float4(-norm,0)).xyz);
    p.tangent = normalize(mul(mat, float4(tang.xyz,0)).xyz);
}

void Constrain_ToParent(inout PARTICLE_STRUCT p, PARTICLE_STRUCT parent)
{
    if(HasParent(p) == false) return;

    float3 vel=0;
    float3 idealPositionDisplacement = p.position - (parent.position - parent.normal * _ChainLength * p.chainLength);
    
    float dist_to_parent = distance(p.position, parent.position);
    if(length(idealPositionDisplacement) > _ChainLength * p.chainLength)
    {
        float diff = abs(length(idealPositionDisplacement) - _ChainLength * p.chainLength);
        float3 cachePos = p.position;

        
        p.position = Move_Towards(p.position, parent.position - parent.normal * _ChainLength * p.chainLength, diff * 1 * _ChainYank);
        p.oldPosition += (p.position - cachePos) * saturate(1 - _DeltaTime * _ChainDamp);
    }
}

// Standard kernels to initialize and kill particles.
INITIALIZE
KILL

UPDATE
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(p.alive)
    {
        if(p.age + _DeltaTime >= p.life && p.life > 0)
        {
            p.alive = false;
            _DeadIndexBuffer.Append(index);
        }
        p.age += _DeltaTime;

        PARTICLE_STRUCT parent = Get_Parent(p);
        
        
        float3 velocity = (p.position - p.oldPosition) / p.oldDeltaTime;

        p.oldPosition = p.position;
        p.position += velocity * _DeltaTime;
        p.oldDeltaTime = _DeltaTime;

        if (HasParent(p))
        {
            if (parent.alive)
            {
                
            }
            else
            {
                // Decouple when parent is dead
                p.chainSegmentIndex = -1;
            }
        }

        float offset = (p.chainLength);

        float wave = sin( (GetTentacleLength(p)) * _WaveFrequency + _WaveCutoff * _time + _WaveFrequency * offset);
        
        float tentacleLength = GetTentacleLength(p);

        float waveSum = 0;

        for (int i = 0; i < _WaveCount; i++)
        {
            float waveDist = TIME_PASSED_ARRAY(_Wave, i) * _WaveFrequency;
            wave = STEP_MIRROR(waveDist - _WaveCutoff, waveDist, tentacleLength, smoothstep)
            waveSum += wave;
        }
        
        waveSum = saturate(waveSum);
        
        //p.color.r = wave;
        p.color = lerp(_BaseColor, _WaveColor, waveSum);
        
        float3 forceSum = 0;
        
        float4 fluidForce = Force_FluidField(p);
        float fluidStrength = length(fluidForce.xyz) * _FluidStrength;
        forceSum += fluidForce.xyz * _FluidStrength;
        
        forceSum += Force_CurlNoise(p, _NoiseScale, 1 + fluidStrength + waveSum * 5) * _NoiseStrength * (fluidStrength +waveSum*15);

        
        forceSum += float3(0, 1, 0) * lerp(_Gravity, -5, fluidForce.w);
        

        if(HasParent(p))
        {
            float3 parentVelocity = (parent.position - parent.oldPosition) / _DeltaTime;
            float3 velocityDifference = velocity - parentVelocity;

            //Targeting the parent
            float3 positionDifference = p.position - parent.position;
            float positionDifferenceLength = length(positionDifference);
            float3 normalToParent = positionDifferenceLength == 0 ? parent.normal : -positionDifference / positionDifferenceLength;

            float3 particleIdealPosition = p.position - (parent.position + parent.normal * _ChainLength * parent.chainLength);

            p.normal = normalToParent;
            p.tangent = normalize(lerp(p.tangent, parent.tangent, min(1, 1 - pow(0.5,10 * _DeltaTime))));
            float3 tempBinormal = cross(p.tangent, p.normal);
            p.tangent = normalize(cross(p.normal, tempBinormal));
            
            p.position += forceSum * 0.5 * _DeltaTime * _DeltaTime;

            Constrain_ToParent(p, parent);
        }
        else
        {
            Constrain_ToRoot(p);
        }

        
        if(HasParent(p))
            Collide_SDF(p.position, p.oldPosition, _CollisionBounce, p.size*2);
        Collision_PlaneY(p.position, p.oldPosition, 0, _CollisionBounce, p.size);
    }

    SetParticle(index, p);
}

RENDER
{
    const uint index = id.x;

    PARTICLE_STRUCT p = _ParticleBuffer[index];

    if(!p.alive) return;

    
    
    if(HasParent(p))
    {
        Render_ChainSegment(p, Get_Parent(p));
    }
    else
    {
        Render_ChainStart(p);
    }
}

SET_EMISSION_TO_DEADCOUNT

EMIT
{
    if (CurrentEmissionCount() < 1) return;
    
    const uint index = _AliveIndexBuffer.Consume();
    
    PARTICLE_STRUCT p = (PARTICLE_STRUCT)0;

    float randomSeed = Random( (float)(index * 2 + id.x + _time + _DeltaTime + dot(_WorldPosition, _WorldPositionOld + 3) * 13.4));
    
    p.alive = true;

    float3 offset = RandomVector(randomSeed + 1);

    uint indexId = (uint) (randomSeed * _MeshIndexCount) % _MeshIndexCount;
    uint tri = (uint) (randomSeed * _MeshIndexCount) % _MeshIndexCount;

    float allowSpawn = 0;
    float spawnColor = 0;

    float spawnGradient = 0;
    
    for(uint j = 0; j < 10 && allowSpawn < 0.5; j++)
    {
        randomSeed = Random( (index + id.x + _time + j));

        indexId = (uint) (randomSeed * _MeshIndexCount) % _MeshIndexCount;
        tri = GetByteAddressBuffer(_MeshIndexBuffer, indexId, _MeshIndexStride, 0);
        
        //tri = (uint) (randomSeed * _MeshVertexCount) % _MeshVertexCount;

        uint subMeshIndex = GetSubMeshIndex(indexId, _MeshSubMeshStart, _MeshSubMeshCount);

        subMeshIndex = 0;
        for (int i = 0; i < 8 && i < _MeshSubMeshCount; i++)
        {   
            if( indexId >= asuint( _MeshSubMeshStart[i].x))
                subMeshIndex = i;
            else break;
        }
        
        if(subMeshIndex == _SpawnTex_HeadSubMeshIndex)
        {
            MESH_SAMPLE_TEXTURE(_Mesh, _SpawnTex_Head, tri, c)
            spawnColor = c.r;
        }
        else if(subMeshIndex == _SpawnTex_BodySubMeshIndex)
        {
            MESH_SAMPLE_TEXTURE(_Mesh, _SpawnTex_Body, tri, c)
            spawnColor = c.r;
        }
        
        allowSpawn = step(_SpawnThreshold, spawnColor.r);
        spawnGradient = saturate((spawnColor.r - _SpawnThreshold) / max(0.001, 1 - _SpawnThreshold));
    }

    if(allowSpawn < 0.5)
    {
        _DeadIndexBuffer.Append(index);
        _ParticleBuffer[index] = (PARTICLE_STRUCT)0;
        return;
    }
    
    
    p.meshParent = tri;
    
    GET_VERTEX_DATA(_Mesh, tri, pos, norm, tang)
    
    offset = mul(_WorldMatrix, float4( pos.xyz, 0)).xyz;
    p.rootOffset = offset;
    
    p.position = offset + _WorldPosition + GetInterpolatedLocation(_WorldPosition, _WorldPositionOld, randomSeed);
    p.oldPosition = p.position - GetInheritedVelocity(_WorldPosition, _WorldPositionOld, 1, _DeltaTime, randomSeed);
    
    p.normal = mul(_WorldMatrix, float4(-norm,0)).xyz;
    p.tangent = mul(_WorldMatrix, float4(tang.xyz,0)).xyz;
 
    float4x4 mat = lerp(_MeshWorldMatrix, _WorldMatrix, _RootMotion);
    
    p.position = mul(mat, float4(pos, 1)).xyz;
    p.oldPosition = p.position;
    p.normal = normalize( mul(mat, float4(-norm,0)).xyz);
    p.tangent = normalize(mul(mat, float4(tang.xyz,0)).xyz);

    p.oldDeltaTime = _DeltaTime;
    
    p.life = 0;
    p.age = 0;
    p.color = spawnColor;
    p.size = _Size;

    p.chainSegmentIndex = 0;
    p.parentIndex = 0;

    p.chainLength = spawnGradient;

    _ParticleBuffer[index] = p;

    uint parentID = index;
    
    for (int i = 1; i < (int) _ParticlesPerEmit; i++ )
    {
        float gradient = 1.0 - (float)i / _ParticlesPerEmit;
        
        PARTICLE_STRUCT child = p;
        child.parentIndex = parentID;
        child.chainSegmentIndex = i;

        //child.position += -p.normal * _ChainLength * p.chainLength * 0;
        //child.oldPosition = child.position;
        child.size = gradient * _Size;

        p = child;
        
        parentID = Spawn_Child(child, parentID);
    }

}

