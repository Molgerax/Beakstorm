#pragma kernel SwapBuffers

#pragma kernel Voronoi_Init
#pragma kernel Voronoi_Iterate
#pragma kernel Voronoi_Finish

#pragma kernel Interpolate_Init
#pragma kernel Interpolate_Iterate
#pragma kernel Interpolate_Finish

#pragma kernel Interpolate_RaymarchClosest
#pragma kernel Interpolate_BoxBlur
#pragma kernel Interpolate_ConvolutionHorizontal
#pragma kernel Interpolate_ConvolutionVertical

#pragma kernel TransferChannels
#pragma kernel ClipHeight

#define THREADGROUP_SIZE 8


int2 _TextureSize;

int _FlipSign;
int _Iteration;
int _MaxIterations;

float _WeightPower;
float _DistanceThreshold;

int _BlendSteps;
int _BlendInnerSteps;

int _StepResult;

RWTexture2D<float> _HeightMap;
RWTexture2D<float> _SdfTexture;
RWTexture2D<float> _SdfInnerTexture;


Texture2D<float4> _ReadTexture;
RWTexture2D<float4> _WriteTexture;

Texture2D<float4> _ReadData;
RWTexture2D<float4> _WriteData;

SamplerState sampler_linear_clamp;


float2 IdToUV(int2 id)
{
    return id.xy / (_TextureSize.xy * 1.0);
}

bool OutOfIndex(uint3 id)
{
    return id.x >= (uint)_TextureSize.x || id.y >= (uint)_TextureSize.y;
}


float StepResult(float value)
{
    return lerp(value, frac(value * 32), _StepResult);
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void SwapBuffers(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    _WriteTexture[id.xy] = _ReadTexture[id.xy];
}



[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Voronoi_Init(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    // Reset the SDF target
    _WriteTexture[id.xy] = 0;

    float2 uv = IdToUV(id.xy);
    
    // Get the input
    float height = _HeightMap[id.xy];
    
    float4 seed = 0;
    
    // If pixel is not empty, mark as seed and save the UVs
    if (height > 0)
    {
        seed.rg = uv;
        seed.a = height;
    }

    _WriteTexture[id.xy] = seed;
}

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Voronoi_Iterate(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    int stepSize = _MaxIterations - (_Iteration + 1);
    stepSize = _Iteration;
    stepSize = pow(2, stepSize);
    
    float2 uv = IdToUV(id.xy);

    float4 input = _ReadTexture[id.xy];
    
    float4 currentPos = 0;
    float currentDist = 100000.0;
    
    float4 finalPos = input;
    float finalDist = distance(uv, finalPos.rg);

    [unroll]
    for (int x = -1; x < 2; x++)
    {
        for (int y = -1; y < 2; y++)
        { 
            if (x==0 && y==0) 
            { 
                continue; 
            }

            int2 offset = (id.xy + int2(x, y) * stepSize);
            
            if (offset.x < 0 || offset.y < 0 || offset.x >= _TextureSize.x || offset.y >= _TextureSize.y)
            {
                currentPos = float4(uv, 0, 0);
                continue;
            }
            else
            {
                currentPos = _ReadTexture[offset.xy];
            }
            
            currentDist = distance(uv, currentPos.rg);
            

            if (currentPos.a > 0 && (currentDist < finalDist || finalPos.a == 0))
            {
                finalPos = currentPos;
                finalDist = currentDist;
            }
        }
    }

    _WriteTexture[id.xy] = finalPos;
}

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Voronoi_Finish(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    
    float2 uv = IdToUV(id.xy);

    float value = _HeightMap[id.xy];
    
    float newValue = input.a;
    value = newValue;

    _HeightMap[id.xy] = value;
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_Init(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    // Reset the SDF target
    _WriteTexture[id.xy] = 0;

    float2 uv = IdToUV(id.xy);
    
    // Get the input
    float height = _HeightMap[id.xy];
    
    float4 seed = 0;
    
    if (height > 0)
        seed.a = height;
    
    // If pixel is not empty, mark as seed and save the UVs
    if (height > 0)
    {
        seed.rg = uv;
        seed.a = height;
    }

    _WriteTexture[id.xy] = seed;
    _WriteData[id.xy] = 0;
}

[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_Iterate(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    int stepSize = _MaxIterations - (_Iteration + 1);
    stepSize = pow(2, stepSize);
    
    float2 uv = IdToUV(id.xy);

    float4 input = _ReadTexture[id.xy];
    float4 data = _ReadData[id.xy];
    
    float4 currentPos = 0;
    float currentDist = 100000.0;
    
    float4 finalPos = input;
    float finalDist = distance(uv, finalPos.rg);
    
    bool applySum = false;

    [unroll]
    for (int x = -1; x < 2; x++)
    {
        for (int y = -1; y < 2; y++)
        { 
            if (x==0 && y==0) 
            { 
                continue; 
            }

            int2 offset = (id.xy + int2(x, y) * stepSize);
            
            if (offset.x < 0 || offset.y < 0 || offset.x >= _TextureSize.x || offset.y >= _TextureSize.y)
            {
                currentPos = float4(uv, 0, 0);
                continue;
            }
            else
            {
                currentPos = _ReadTexture[offset.xy];
            }
            
            currentDist = distance(uv, currentPos.rg);
            

            if (currentPos.a > 0 && (currentDist < finalDist || finalPos.a == 0))
            {
                finalPos = currentPos;
                finalDist = currentDist;
            }

            if (currentPos.a > 0)
            {
                applySum = true;

                
                data.r += 1.0 / pow(currentDist, _WeightPower);
                data.g += currentPos.a / pow(currentDist, _WeightPower);
            }
        }
    }
    
    if (applySum) 
    { 
    }

    _WriteTexture[id.xy] = finalPos;
    _WriteData[id.xy] = data;
}


int closestValue(int a, int b, int x)
{
    return (abs(a-x) < abs(b-x)) ? a : b;
}

int2 closestCorner(int2 pixelPos)
{
    int2 output = 0;
    output.x = closestValue(0, _TextureSize.x, pixelPos.x);
    output.y = closestValue(0, _TextureSize.y, pixelPos.y);
    return output;
}

int2 largerAxis(int2 v)
{
    return (abs(v.x) >= abs(v.y)) ? int2(1,0) : int2(0,1);
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_Finish(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    float4 sumData = _ReadData[id.xy];
    float value = _HeightMap[id.xy];

    float2 uv = IdToUV(id.xy);

    float maxDist = distance(uv, input.rg);
    maxDist *= _DistanceThreshold * 4;

    int steps = _BlendSteps;
    int innerSteps = _BlendInnerSteps;
    float sine;
    float cosine;

    float sum = 0;
    float distanceSum = 0;


    float turnFraction = 0.618033;
    
    //[unroll(512)]
    [loop]
    for (int i = 0; i < steps; i++)
    {
        float range = maxDist * sqrt(i / (steps - 1.0));
        float angle = 6.28318 * i * turnFraction;
    
        sincos(angle, sine, cosine);
        float2 pointerDir = float2(sine, cosine);
        float2 pointer = pointerDir * range;
        int2 offset = floor(pointer * _TextureSize.xy);

        int2 read = id.xy + offset;
        read = max(0, min(read, _TextureSize - 1));

        float2 newUv = IdToUV(read);

        float4 newSample = _ReadTexture[read];

        float d = distance(uv, newSample.rg);

        if (read.x >= 0 && read.y >= 0 && read.x < _TextureSize.x && read.y < _TextureSize.y)
        {
            d = 1.0 / pow(d, _WeightPower);
            sum += newSample.a * d;
            distanceSum += d;
        }
    }


    float newValue = maxDist;

    newValue = sum / distanceSum;

    if (_WeightPower < 0)
        newValue = input.a;
    
    if (value == 0)
    {
        value = newValue;
    }

    value = StepResult(value);

    _HeightMap[id.xy] = value;
}

#define E 2.71828
#define TWO_PI 6.283185


float gaussian(int x, float spread)
{
    float sigmaSquared = spread * spread;
    return (1 / sqrt(TWO_PI * sigmaSquared)) * pow(E, -(x * x) / (2 * sigmaSquared));
}


float random2t1(float2 uv)
{
    float2 noise = (frac(sin(dot(uv ,float2(12.9898,78.233)*2.0)) * 43758.5453));
    return abs(noise.x + noise.y) * 0.5;
}



[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_RaymarchClosest(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    float value = _HeightMap[id.xy];

    float2 uv = IdToUV(id.xy);

    float maxDist = distance(uv, input.rg);
    maxDist *= _DistanceThreshold;

    int steps = _BlendSteps;

    float sum = 0;
    float distanceSum = 0;

    float turnFraction = 0.618033;
    
    float sine;
    float cosine;

    int rotateSteps = max(1, steps / 4);

    [loop]
    for (int i = 0; i < rotateSteps; i++)
    {
        float angle = 6.28318 * (i + random2t1(id.xy / (1.0 * _TextureSize.xy))) / rotateSteps;

        sincos(angle, sine, cosine);
        float2 pointerDir = float2(sine, cosine);
        
        float walkDist = 0;

        for (int j = 0; j < 16; j++)
        {
            float2 pointer = pointerDir * walkDist;
            int2 offset = round(pointer);

            int2 read = id.xy + offset;
            read = max(0, min(read, _TextureSize - 1));
            float2 newUv = IdToUV(read);
            if (read.x < 0 || read.y < 0 || read.x >= _TextureSize.x || read.y >= _TextureSize.y) 
            { 
                j = steps;
                break;
            }

            float4 newSample = _ReadTexture[read];
            float ownDist = distance(newUv * _TextureSize.xy, newSample.rg * _TextureSize.xy);
            
            if (ownDist < 0.001)
            {
                float d = walkDist;
                d = 1.0 / pow(d, _WeightPower);
                sum += newSample.a * d;
                distanceSum += d;
                j = steps;
                break;
            }
            walkDist += ownDist;
        }
    }


    float newValue = maxDist;
    newValue = sum / distanceSum;


    if (_WeightPower < 0)
        newValue = input.a;
    
    if (value == 0)
    {
        value = newValue;
    }

    
    _WriteData[id.xy] = value;
}




[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_BoxBlur(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    float value = _HeightMap[id.xy];
    float4 readData = _ReadData[id.xy];

    float2 uv = IdToUV(id.xy);

    float sum = 0;
    float distanceSum = 0;


    int blurSteps = max(0, 10 * _DistanceThreshold);

    for (int xStep = -blurSteps; xStep <= blurSteps; xStep++)
    {
        for (int yStep = -blurSteps; yStep <= blurSteps; yStep++)
        {
            int2 read = id.xy + int2(xStep, yStep);
            read = max(0, min(read, _TextureSize - 1));

            float4 newSample = _ReadData[read];

            float d = 1.0 / (1.0 + sqrt(xStep*xStep + yStep*yStep));
            sum += newSample.a * d;
            distanceSum += d;
        }
    }

    float newValue = sum / distanceSum;
    
    if (_WeightPower < 0)
        newValue = input.a;
    
    if (value == 0)
    {
        value = newValue;
    }

    value = StepResult(value);

    _HeightMap[id.xy] = value;
}




[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_ConvolutionHorizontal(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    float value = _HeightMap[id.xy];
    float4 readData = _ReadData[id.xy];

    float2 uv = IdToUV(id.xy);

    int steps = _DistanceThreshold * 10;

    float sum = 0;
    float distanceSum = 0;

    [loop]
    for (int i = -steps; i <= steps; i++)
    {
        int2 offset = int2(i, 0);
        
        int2 read = id.xy + offset;
        read = max(0, min(read, _TextureSize - 1));
        
        float4 newSample = _ReadData[read];
        if (read.x >= 0 && read.y >= 0 && read.x < _TextureSize.x && read.y < _TextureSize.y)
        {
            float d = distance(uv, newSample.rg);
            //d = 1.0 / pow(d, _WeightPower);
            d = gaussian(i, steps / 1.5);
            sum += newSample.r * d;
            distanceSum += d;
        } 
    }


    float newValue = sum / distanceSum;


    if (_WeightPower < 0)
        newValue = input.a;
    
    if (value == 0)
    {
        value = newValue;
    }

    _WriteData[id.xy] = value;
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void Interpolate_ConvolutionVertical(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return;

    float4 input = _ReadTexture[id.xy];
    float value = _HeightMap[id.xy];
    float4 readData = _ReadData[id.xy];

    float2 uv = IdToUV(id.xy);

    int steps = _DistanceThreshold * 10;

    float sum = 0;
    float distanceSum = 0;

    [loop]
    for (int i = -steps; i <= steps; i++)
    {
        int2 offset = int2(0, i);
        
        int2 read = id.xy + offset;
        read = max(0, min(read, _TextureSize - 1));
        
        float4 newSample = _ReadTexture[read];
        float4 newData = _ReadData[read];
        if (read.x >= 0 && read.y >= 0 && read.x < _TextureSize.x && read.y < _TextureSize.y)
        {
            float d = distance(uv, newSample.rg);
            //d = 1.0 / pow(d, _WeightPower);
            d = gaussian(i, steps / 1.5);
            sum += newData.r * d;
            distanceSum += d;
        } 
    } 


    float newValue = sum / distanceSum;

    if (_WeightPower < 0)
        newValue = input.a;
    
    if (value == 0)
    {
        value = newValue;
    }

    value = StepResult(value);

    _HeightMap[id.xy] = value;
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void TransferChannels(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return; 

    float4 value = _WriteTexture[id.xy];

    value.g = _HeightMap[id.xy];

    _WriteTexture[id.xy] = value;
}


[numthreads(THREADGROUP_SIZE, THREADGROUP_SIZE, 1)]
void ClipHeight(uint3 id : SV_DispatchThreadID)
{
    if (OutOfIndex(id))
        return; 

    float4 value = _ReadTexture[id.xy];

    float height = _HeightMap[id.xy];

    height *= step(0, value.r);

    _HeightMap[id.xy] = height;
}