#pragma kernel Update
#pragma kernel Init

#pragma kernel UpdateSpatialHash
#pragma kernel Emit
#pragma kernel EmissionCountKernel

#include "../SpatialHashing/RandomFunctions.hlsl"

#include "PheromoneParameters.hlsl"
#include "PheromoneMath.hlsl"

#include "../Collisions/SdfCollisions.hlsl"

#define THREAD_BLOCK_SIZE 256


float UvOutOfBounds(float2 uv)
{
    float2 q = step(1, uv) + (step(uv, 0));
    return 1-step(dot(q, q), 0);
}


float3 safeNormalize(float3 value)
{
    if (dot(value, value) == 0)
        return float3(0, 1, 0);
    return normalize(value);

}

float3 limitVector(float3 v, float maxLength)
{
    if (dot(v, v) == 0)
        return 0;
    float len = length(v);
    return (v / len) * min(len, maxLength);
}

float3 clampVector(float3 v, float min, float max)
{
    if (dot(v, v) == 0)
        return 0;
    float len = length(v);
    return (v / len) * clamp(len, min, max);
}

float3 calcSteerForce(float3 steer, float3 currentVelocity, float maxSpeed, float maxForce)
{
    float3 desiredVelocity = safeNormalize(steer) * maxSpeed;
    return limitVector(desiredVelocity - currentVelocity, maxForce);
}


float3 forceFromBounds(float3 pos)
{
    float dist = step(0, sdfBox(_SimulationCenter, _SimulationSpace * 0.5, pos));
    float3 p = ClosestPointOnBox(_SimulationCenter, _SimulationSpace * 0.5, pos);
    float3 v = p - pos;
    float3 force = clampVector(v, 10, 1);
    return force * dist;
}

// Collision
void collideBounds(inout float3 pos, inout float3 oldPos)
{
    float dist = sdfBox(_SimulationCenter, _SimulationSpace * 0.5, pos);
    
    if (dist < 0)
    {
        return;
    }
    float3 p = ClosestPointOnBox(_SimulationCenter, _SimulationSpace * 0.5, pos);
    float3 diff = pos - p;

    float3 normal = safeNormalize(diff);

    float3 vel = pos - oldPos;
    float3 flattenVelocity = -dot(vel + normal * -dist, normal) * normal;
    float3 mostBounceVelocity = -dot(vel, normal) * normal;
           
    oldPos = lerp(oldPos - flattenVelocity, oldPos - mostBounceVelocity, saturate(0.5));
    
    oldPos = (oldPos - flattenVelocity);
    pos -= normal * dist;
}

void collideSdf(inout float3 pos, inout float3 oldPos, SdfQueryInfo sdf, float bounce)
{
    float dist = sdf.dist;
    float3 normal = sdf.normal;
    if (dist > 0)
    {
        return;
    }
    float3 vel = pos - oldPos;
    float3 flattenVelocity = -dot(vel + normal * -dist, normal) * normal;
    float3 mostBounceVelocity = -dot(vel, normal) * normal;
           
    oldPos = lerp(oldPos - flattenVelocity, oldPos - mostBounceVelocity, saturate(bounce));
    pos -= normal * dist;
}

float3 centerForce(float3 pos, uint index)
{
    float radius = 100;
    float len = length(pos);
    float3 force = -safeNormalize(pos) * max(0, len - radius);
    return limitVector(force, 100);
}

float3 sdfForce(SdfQueryInfo info)
{
    float3 f = info.normal;
    float strength = -min(0, info.dist - 3);
    return f * strength;
}

float4 PressureForce(uint index)
{
    float3 positionA = _PositionBuffer[index];
    
    int numNeighbors = 0;
    float3 densityGradient = 0;
    float density = 0;
    
    // Neighborhood Search using Spatial Hash Grids
    int3 originCell = GetCell3D(positionA, _HashCellSize);
    
    for (int i = 0; i < 27; i++)
    {
        uint hashCell = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hashCell, _TotalCount);
        uint currIndex = _PheromoneSpatialOffsets[key];
        
        
        while (currIndex < _TotalCount)
        {
            uint3 indexData = _PheromoneSpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key)
                break;
			// Skip if hash does not match
            if (indexData[1] != hashCell)
                continue;
            
            uint neighborIndex = indexData[0];

            if (!IsAlive(neighborIndex))
                continue;
            
            if(neighborIndex == index)
                continue;
            
            float3 positionB = _PositionBuffer[neighborIndex];
            float3 offset = positionB - positionA;
            float distSquared = dot(offset, offset);
            
            if (distSquared > _HashCellSize * _HashCellSize)
                continue;
            numNeighbors++;

            float d = GetDensityFromParticle(positionA, positionB, _HashCellSize);
            float3 g = GetDensityDerivativeFromParticle(positionA, positionB, _HashCellSize);
            
            density += d;
            densityGradient += g;
        }
    }
    
    return float4(densityGradient, density);
}


[numthreads(THREAD_BLOCK_SIZE,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;

    if (!IsAlive(index))
        return;
        
    float3 currentPosition = _PositionBuffer[index];
    float3 oldPosition = _OldPositionBuffer[index];
    
    float3 velocity = (currentPosition - oldPosition) / _DeltaTime;
    oldPosition = currentPosition;
    
    SdfQueryInfo sdfInfo = GetClosestDistance(currentPosition, 0);
    
    float4 dense = PressureForce(index);
    float3 densityGradient = dense.xyz;
    float density = (dense.w);
    
    float3 acceleration = 0;
    acceleration += densityGradient;
    //acceleration += forceFromBounds(currentPosition);
    //acceleration += centerForce(currentPosition, index);
    //acceleration += sdfForce(sdfInfo);

    //acceleration -= velocity * 0.5;
    
    velocity += acceleration * _DeltaTime;
    velocity = acceleration * 5;

    currentPosition += velocity * _DeltaTime;
    
    //collideBounds(currentPosition, oldPosition);
    collideSdf(currentPosition, oldPosition, sdfInfo, 0.1);
    
    _PositionBuffer[index] = currentPosition;
    _OldPositionBuffer[index] = oldPosition;

    float life = DepleteLife(index, _DeltaTime);

    float4 data = _DataBuffer[index];
    //data.xyz = densityGradient;
    //data.w = density;

    data.x = density;
    data.w = life / data.z;
    
    _DataBuffer[index] = data;
}

[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    
    int sideLength = pow(_TotalCount, 1 / 2.0);

    int3 newId = 0;
    newId.x = index % sideLength;
    newId.y = (index / sideLength);
    newId.z = (index / sideLength);
    
    float stagger = ((float)index / _TotalCount) * 2;// - 1;
    float3 offset = - _WorldMatrix._m20_m21_m22 * stagger * _TotalCount;

    //offset = _WorldMatrix._m00_m01_m02 * stagger * 32;
    offset = (RandomVector01(index) - 0.5) * _SimulationSpace;

    //offset = 0;
    //offset.xyz = ((float3)newId / sideLength - 0.5) * _SimulationSpace.xyz; 

    //offset.y = 0;
    
    float3 currentPosition = offset + _WorldPos;
    float3 currentVelocity = RandomVector(index) * 0.0;
    float3 oldPosition = currentPosition - currentVelocity * _DeltaTime;

    
    _AliveBuffer[index] = 0;
    _DeadIndexBuffer.Append(index);
    
    _PositionBuffer[index] = currentPosition;
    _OldPositionBuffer[index] = oldPosition;
    _DataBuffer[index] = 0;
}

[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    
    if (index >= _TotalCount)
        return;

    //if (!IsAlive(index))
    //    return;
    
    float3 position = _PositionBuffer[index];

    SetSpatialHash_Pheromone(index, position, _TotalCount, _HashCellSize);
}


[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void Emit (uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    if (CurrentEmissionCount() <= id.x)
        return;
    
    const uint index = _AliveIndexBuffer.Consume();

    float randomOffset = Random(index) * 1.0;
    
    float3 pos = lerp(_SpawnPos, _SpawnPosOld, randomOffset) + RandomVector(index) * 0.01;
    //pos.y = 0;
    //pos = 0;
    //pos.x = ((float)index / _TotalCount * 2 - 1) * _SimulationSpace.x;
    
    float3 oldPos = pos;// - RandomVector(index) * _DeltaTime * 5;
    //oldPos.y = 0;

    float maxLifeTime = _LifeTime;
    float lifeTime = _LifeTime - _DeltaTime * randomOffset;
    _AliveBuffer[index] = lifeTime;


    float4 data = 0;
    
    data.z = maxLifeTime;
    data.w = lifeTime / maxLifeTime;
    data.xy = lifeTime;
    
    _PositionBuffer[index] = pos;
    _OldPositionBuffer[index] = oldPos;
    _DataBuffer[index] = data;
}


[numthreads(1, 1, 1)] 
void EmissionCountKernel (uint3 id : SV_DispatchThreadID) 
{ 
    uint totalDead = _DeadCountBuffer[0]; 
    uint finalEmit = min(_TargetEmitCount, floor(totalDead / _ParticlesPerEmit));
    _DeadCountBuffer[0] = finalEmit;
    _DeadCountBuffer[3] = totalDead;
}
