#pragma kernel Update
#pragma kernel Init

#pragma kernel Emit
#pragma kernel Clear
#pragma kernel PrepareSort

#include "../SpatialHashing/RandomFunctions.hlsl"

#include "PheromoneParameters.hlsl"
#include "PheromoneMath.hlsl"

#include "../Collisions/SdfCollisions.hlsl"

#define THREAD_BLOCK_SIZE 256

float3 _CameraPos;
float3 _CameraForward;

void KeepAlive(Pheromone p)
{
    uint index = _PheromoneBuffer.IncrementCounter();
    if (index >= _AgentCount)
        return;

    _PheromoneBuffer[index] = p;
}



float UvOutOfBounds(float2 uv)
{
    float2 q = step(1, uv) + (step(uv, 0));
    return 1-step(dot(q, q), 0);
}


float3 safeNormalize(float3 value)
{
    if (dot(value, value) == 0)
        return float3(0, 1, 0);
    return normalize(value);

}

float3 limitVector(float3 v, float maxLength)
{
    if (dot(v, v) == 0)
        return 0;
    float len = length(v);
    return (v / len) * min(len, maxLength);
}

float3 clampVector(float3 v, float min, float max)
{
    if (dot(v, v) == 0)
        return 0;
    float len = length(v);
    return (v / len) * clamp(len, min, max);
}

float3 calcSteerForce(float3 steer, float3 currentVelocity, float maxSpeed, float maxForce)
{
    float3 desiredVelocity = safeNormalize(steer) * maxSpeed;
    return limitVector(desiredVelocity - currentVelocity, maxForce);
}


float3 forceFromBounds(float3 pos)
{
    float dist = step(0, sdfBox(_SimulationCenter, _SimulationSize * 0.5, pos));
    float3 p = ClosestPointOnBox(_SimulationCenter, _SimulationSize * 0.5, pos);
    float3 v = p - pos;
    float3 force = clampVector(v, 10, 1);
    return force * dist;
}

// Collision
void collideBounds(inout float3 pos, inout float3 oldPos)
{
    float dist = sdfBox(_SimulationCenter, _SimulationSize * 0.5, pos);
    
    if (dist < 0)
    {
        return;
    }
    float3 p = ClosestPointOnBox(_SimulationCenter, _SimulationSize * 0.5, pos);
    float3 diff = pos - p;

    float3 normal = safeNormalize(diff);

    float3 vel = pos - oldPos;
    float3 flattenVelocity = -dot(vel + normal * -dist, normal) * normal;
    float3 mostBounceVelocity = -dot(vel, normal) * normal;
           
    oldPos = lerp(oldPos - flattenVelocity, oldPos - mostBounceVelocity, saturate(0.5));
    
    oldPos = (oldPos - flattenVelocity);
    pos -= normal * dist;
}

void collideSdf(inout float3 pos, inout float3 oldPos, SdfQueryInfo sdf, float bounce)
{
    float dist = sdf.dist;
    float3 normal = sdf.normal;
    if (dist > 0)
    {
        return;
    }
    float3 vel = pos - oldPos;
    float3 newVel = vel - (1+bounce) * dot(vel, normal) * normal;
    
    pos -= (1+bounce) * normal * dist;
    oldPos = pos - newVel;
}

float3 centerForce(float3 pos, uint index)
{
    float radius = 100;
    float len = length(pos);
    float3 force = -safeNormalize(pos) * max(0, len - radius);
    return limitVector(force, 100);
}

float3 sdfForce(SdfQueryInfo info)
{
    float3 f = info.normal;
    float strength = -min(0, info.dist - 3);
    return f * strength;
}


void LimitToBounds(inout float3 pos, inout float3 oldPos)
{   
    float3 uv = (pos - _SimulationCenter) / _SimulationSize + 0.5;
    float dist = sdfBox(_SimulationCenter, _SimulationSize * 0.5, pos) - 0.01;

    if (dist < 0)
        return;
    
    int3 mask = -1 + step(0, uv);
    mask += 1 - step(uv, 1);

    float3 normal = normalize(mask);
    

    float3 vel = pos - oldPos;
    float3 flattenVelocity = -dot(vel + normal * -dist, normal) * normal;
    float3 mostBounceVelocity = -dot(vel, normal) * normal;
           
    oldPos = lerp(oldPos - flattenVelocity, oldPos - mostBounceVelocity, saturate(0.1));
    pos -= normal * dist;
}


float4 PressureForce(uint index, Pheromone pheromone)
{
    float3 positionA = pheromone.pos;
    
    int numNeighbors = 0;
    float3 densityGradient = 0;
    float density = 0;
    
    int3 originCell = GetGridCellId(positionA, _HashCellSize, _SimulationCenter, _SimulationSize);
    
    int sideLength = GetCellCoverageSideLength(_SmoothingRadius, _HashCellSize);
    int3 cellOffset = GetCellOffset(positionA, sideLength, _HashCellSize);
    
    for(int iterator = 0; iterator < sideLength * sideLength * sideLength; iterator++)
    {
        int3 offset3D = GetIntegerOffsets3D(sideLength, iterator) + cellOffset;
        
        uint key = KeyFromCellId(originCell + offset3D, _CellDimensions);
        uint currIndex = _PheromoneSpatialOffsets[key-1];
        uint nextIndex = _PheromoneSpatialOffsets[key+0];
        
        while (currIndex < nextIndex)
        {
            Pheromone p2 = _PheromoneBufferRead[currIndex];
            currIndex++;
            
            if (!IsAlive(p2))
                continue;
            
            if(currIndex - 1 == index)
                continue;
            
            float3 positionB = p2.pos;
            float3 offset = positionB - positionA;
            float distSquared = dot(offset, offset);
            
            if (distSquared > _SmoothingRadius * _SmoothingRadius)
                continue;
            numNeighbors++;

            float d = GetDensityFromParticle(positionA, positionB, _SmoothingRadius);
            float3 g = GetDensityDerivativeFromParticle(positionA, positionB, _SmoothingRadius);
            
            density += d;
            densityGradient += g;
        }
    }
    
    return float4(densityGradient, density);
}


[numthreads(THREAD_BLOCK_SIZE,1,1)]
void Update (uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    
    if (index >= _AgentCount)
        return;

    if (index >= _InstancedArgsBuffer[1])
    {
        _PheromoneBuffer[index] = (Pheromone)0;
        return;
    }
    
    Pheromone pheromone = _PheromoneBufferRead[index];
    if (pheromone.life <= 0)
        return;
    

    if (_DeltaTime == 0)
    {
        
        if (pheromone.life > 0)
            KeepAlive(pheromone);
        return;
    }

    float3 currentPosition = pheromone.pos;
    float3 oldPosition = pheromone.oldPos;
    
    float3 velocity = (currentPosition - oldPosition) / _DeltaTime;
    oldPosition = currentPosition;
    
    float4 dense = PressureForce(index, pheromone);
    float3 densityGradient = dense.xyz;
    float density = (dense.w);
    
    float3 acceleration = 0;
    acceleration += densityGradient;
    //acceleration += forceFromBounds(currentPosition);
    //acceleration += centerForce(currentPosition, index);
    //acceleration += sdfForce(sdfInfo);

    //acceleration -= velocity * 0.5;
    
    velocity += acceleration * _DeltaTime;
    velocity = acceleration * 5;

    currentPosition += velocity * _DeltaTime;
    
    //collideBounds(currentPosition, oldPosition);
    
    SdfQueryInfo sdfInfo = GetClosestDistance(currentPosition, 0);
    collideSdf(currentPosition, oldPosition, sdfInfo, 0.1);

    LimitToBounds(currentPosition, oldPosition);
    
    pheromone.pos = currentPosition;
    pheromone.oldPos = oldPosition;

    pheromone.life = (pheromone.life - _DeltaTime);
    
    float4 data = pheromone.data;
    //data.xyz = densityGradient;
    //data.w = density;

    
    
    data.x = density;
    data.w = pheromone.life / pheromone.maxLife;
    pheromone.data = data;

    
    if (pheromone.life > 0)
        KeepAlive(pheromone);
    
    //_PheromoneBuffer[index] = pheromone;
}

[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    if (index >= _AgentCount)
        return;
}


[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void Emit (uint3 id : SV_DispatchThreadID, uint3 groupId : SV_GroupID)
{
    uint aliveCount = _InstancedArgsBuffer[1];
    uint totalDead = _AgentCount - aliveCount; 
    uint finalEmit = min(_TargetEmitCount, floor(totalDead / _ParticlesPerEmit));
    
    if (id.x >= finalEmit)
        return;

    if (_DeltaTime <= 0)
    {
        return;
    }

    if (_LifeTime <= 0)
    {
        return;
    }

    const uint index = _PheromoneBuffer.IncrementCounter();
    Pheromone p = (Pheromone)0;
    
    uint seed = index + id.x + groupId.x * THREAD_BLOCK_SIZE + _Time * 240;
    float randomOffset = Random(seed) * 1.0;

    float sinus, cosine;
    sincos(randomOffset * 6.283185, sinus, cosine);

    float3 spawnPos = _SpawnPos;
    float3 spawnPosOld = _SpawnPosOld;

    float3 pos = lerp(spawnPos, spawnPosOld, randomOffset);
    float3 oldPos = pos;// - RandomVector(index) * _DeltaTime * 5;
    pos += RandomVector(seed) * 3 * randomOffset * _DeltaTime;
    
    float3 vel = spawnPos - spawnPosOld;
    if (dot(vel, vel) != 0)
    {
        float3 right = cross(float3(0,1,0), vel);
        float3 up = cross(vel, right);
        float mag = sqrt(Random(seed + 2));
        //pos += normalize(right) * sinus * mag + normalize(up) * cosine * mag;
    }
    //pos.y = 0;
    //pos = 0;
    //pos.x = ((float)index / _TotalCount * 2 - 1) * _SimulationSpace.x;
    
    //oldPos.y = 0;

    float maxLifeTime = _LifeTime;
    float lifeTime = _LifeTime - _DeltaTime * randomOffset * 3;


    float4 data = 0;
    
    data.z = maxLifeTime;
    data.w = lifeTime / maxLifeTime;
    data.x = 0;
    data.y = index;
    
    p.pos = pos;
    p.oldPos = oldPos;
    p.data = data;
    p.life = lifeTime;
    p.maxLife = maxLifeTime;
    
    _PheromoneBuffer[index] = p;    
}


[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    if (index >= _AgentCount)
        return;

    _PheromoneBuffer[index] = (Pheromone)0;
}


[numthreads(THREAD_BLOCK_SIZE, 1, 1)]
void PrepareSort(uint3 id : SV_DispatchThreadID)
{
    const uint index = id.x;
    if (index >= _AgentCount)
        return;

    SortEntry entry;
    entry.index = index;
    entry.dist = 10000;
    
    if (index >= _InstancedArgsBuffer[1])
    {
        _PheromoneSortingBuffer[index] = entry;
        return;
    }
    
    Pheromone p = _PheromoneBufferRead[index];
    float3 cameraDiff = p.pos - _CameraPos;
    float cameraDist = dot(cameraDiff, _CameraForward);
    
    entry.dist = cameraDist;
    _PheromoneSortingBuffer[index] = entry;
}
