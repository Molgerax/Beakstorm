#pragma kernel SortKernel

#define THREAD_GROUP_SIZE 128

struct Pheromone
{
    uint index;
    float dist;
};

RWStructuredBuffer<Pheromone> _SortBuffer;
uint _Count;
uint _GroupWidth;
uint _StepIndex;

// Sort the given entries by their distance (smallest to largest)
// This is done using bitonic merge sort, and takes multiple iterations
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void SortKernel(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;

    uint groupIndex = (i / _GroupWidth);
    uint indexInGroup = i - groupIndex * _GroupWidth;
    uint indexLeft = indexInGroup + _GroupWidth * 2 * (groupIndex);

    uint stepSize = _GroupWidth;
    if (_StepIndex == 0)
        stepSize = 2 * (_GroupWidth - indexInGroup) - 1;
    
    uint indexRight = indexLeft + stepSize;

	// Exit if out of bounds
    if (indexRight >= _Count)
        return;

    Pheromone valueLeft = _SortBuffer[indexLeft];
    Pheromone valueRight = _SortBuffer[indexRight];
    
	// Swap entries if value is descending or if value is completely out of order
    if ((valueLeft.dist < valueRight.dist && valueLeft.dist < 1000 && valueRight.dist < 1000))
    {
        _SortBuffer[indexLeft] = valueRight;
        _SortBuffer[indexRight] = valueLeft;
    }
}