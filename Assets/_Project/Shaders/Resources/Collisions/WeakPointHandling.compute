#pragma kernel FlushDamage
#pragma kernel CollideBoids

#include "../SpatialHashing/SpatialHashGrids.hlsl"

StructuredBuffer<float4> _WeakPointBuffer;
RWStructuredBuffer<int> _DamageBuffer;
StructuredBuffer<int> _FlushDamageBuffer;

int _WeakPointCount;
float _Time;
float _DeltaTime;


[numthreads(16,1,1)]
void FlushDamage(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    if (index >= _WeakPointCount)
        return;

    _DamageBuffer[index] -= _FlushDamageBuffer[index];
}


StructuredBuffer<float3> _PositionBuffer;
StructuredBuffer<float3> _OldPositionBuffer;
float _HashCellSize;
uint _TotalCount;

SPATIAL_HASH_BUFFERS(_Boid)


float lineSphereIntersection(float3 p1, float3 p2, float3 p3, float r)
{
    float3 d = p2 - p1;
    float a = dot(d, d);
    float b = 2 * dot(d, p1 - p3);
    float c = dot(p3, p3) + dot(p1, p1) - 2 * dot(p3, p1) - r * r;
    return b * b - 4 * a * c;
}

[numthreads(16,1,1)]
void CollideBoids(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    if (index >= _WeakPointCount)
        return;
    
    float4 posR = _WeakPointBuffer.Load(index);
    float3 positionA = posR.xyz;
    float radius = posR.w;
    
    // Neighborhood Search using Spatial Hash Grids
    int3 originCell = GetCell3D(positionA, _HashCellSize);
    
    for (int i = 0; i < 27; i++)
    {
        uint hashCell = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hashCell, _TotalCount);
        uint currIndex = _BoidSpatialOffsets[key];
        
        while (currIndex < _TotalCount)
        {
            uint3 indexData = _BoidSpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key)
                break;
			// Skip if hash does not match
            if (indexData[1] != hashCell)
                continue;
            
            uint neighborIndex = indexData[0];
            float3 positionB = _PositionBuffer[neighborIndex]; 
            float3 offset = positionB - positionA;
            
            if (dot(offset, offset) > (_HashCellSize + radius) * (_HashCellSize + radius))
                continue;

            if (dot(offset, offset) > radius * radius)
                continue;
            
            float3 oldPositionB = _OldPositionBuffer[neighborIndex]; 
            float3 oldOffset = oldPositionB - positionA;
            if (dot(oldOffset, oldOffset) > radius * radius)
                _DamageBuffer[index] += 1;
        }
    }
}
