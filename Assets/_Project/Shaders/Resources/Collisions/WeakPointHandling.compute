#pragma kernel FlushDamage
#pragma kernel Clear
#pragma kernel CollideBoids

#include "../SpatialGrid/SpatialGridSampling.hlsl"
#include "ImpactUtility.hlsl"

#define THREAD_GROUP_SIZE 16


StructuredBuffer<float4> _WeakPointBuffer;
RWStructuredBuffer<int> _DamageBuffer;
StructuredBuffer<int> _FlushDamageBuffer;

int _WeakPointCount;
float _Time;
float _DeltaTime;


[numthreads(THREAD_GROUP_SIZE,1,1)]
void FlushDamage(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    if (index >= _WeakPointCount)
        return;

    int flushDamage = _FlushDamageBuffer[index];
    int dmg = _DamageBuffer[index] - flushDamage;

    if (flushDamage >= 10000)
        dmg = 0;
    
    _DamageBuffer[index] = max(0, dmg);
}

[numthreads(THREAD_GROUP_SIZE,1,1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    if (index >= _WeakPointCount)
        return;

    _DamageBuffer[index] = 0;
}


StructuredBuffer<float3> _PositionBuffer;
StructuredBuffer<float3> _OldPositionBuffer;


struct Boid
{
    float3 pos;
    float exposure;
    float3 oldPos;
    float data;
    float4 rotation;
};

StructuredBuffer<Boid> _BoidBuffer;
StructuredBuffer<uint> _GridOffsetBuffer;

float lineSphereIntersection(float3 p1, float3 p2, float3 p3, float r)
{
    float3 d = p2 - p1;
    float a = dot(d, d);
    float b = 2 * dot(d, p1 - p3);
    float c = dot(p3, p3) + dot(p1, p1) - 2 * dot(p3, p1) - r * r;
    return b * b - 4 * a * c;
}

[numthreads(THREAD_GROUP_SIZE,1,1)]
void CollideBoids(uint3 id : SV_DispatchThreadID)
{
    int index = id.x;

    if (index >= _WeakPointCount)
        return;

    if (_DeltaTime == 0)
    {
        return;
    }
    
    float4 posR = _WeakPointBuffer.Load(index);
    float3 positionA = posR.xyz;
    float radius = posR.w;

    if (dot(posR, posR) == 0)
    {
        _DamageBuffer[index] = 0;
        return;
    }
    
    int3 originCell = GetGridCellId(positionA, _HashCellSize, _SimulationCenter, _SimulationSize);
    uint3 cellDimensions = _CellDimensions;

    int sideLength = GetCellCoverageSideLength(radius, _HashCellSize);
    int3 cellOffset = GetCellOffset(positionA, sideLength, _HashCellSize);

    uint ogKey = KeyFromCellId(originCell, cellDimensions);

    
    for(int iterator = 0; iterator < sideLength * sideLength * sideLength; iterator++)
    {
        int3 offset3D = GetIntegerOffsets3D(sideLength, iterator) + cellOffset;
        
        uint key = KeyFromCellId(originCell + offset3D, cellDimensions);
        uint currIndex = _GridOffsetBuffer[key-1];
        uint nextIndex = _GridOffsetBuffer[key+0];
    
        while (currIndex < nextIndex)
        {
            Boid boid = _BoidBuffer[currIndex];
            currIndex++;
 
            float3 offset = boid.pos - positionA;
            
            if (dot(offset, offset) > (_HashCellSize + radius) * (_HashCellSize + radius))
                continue;

            if (dot(offset, offset) > radius * radius)
                continue;
            
            float3 velocity = (boid.pos - boid.oldPos) / _DeltaTime;
            
            float3 oldOffset = boid.oldPos - positionA;
            if (dot(oldOffset, oldOffset) > radius * radius)
            {
                uint damage = CalculateDamage(velocity) * 100;
                _DamageBuffer[index] += damage;
                
                float dist = length(offset);
                if (dist == 0)
                    continue;

                float3 norm = offset / dist;
                AddImpact(positionA + norm * radius, norm, damage);
            }
        }
    }
}
