#pragma kernel CollectValues

#include "../SpatialHashing/SpatialHashGrids.hlsl"


struct ParticleCell
{
    float3 position;
    float3 velocity;
    float4 data;
    uint count;
};

RWStructuredBuffer<ParticleCell> _CellBuffer;


float _Time;
float _DeltaTime;


uint _TotalCount;
float3 _SimulationCenter;
float3 _SimulationSpace;

StructuredBuffer<float3> _ParticlePositionBuffer;
StructuredBuffer<float3> _ParticleOldPositionBuffer;
StructuredBuffer<float4> _ParticleDataBuffer;
uint _ParticleCount;
float _HashCellSize;



SPATIAL_HASH_BUFFERS(_)


uint3 id1Dto3D(uint id, uint3 resolution)
{
    uint3 o;
    o.z = id / (resolution.x * resolution.y);
    o.y = id / resolution.x - o.z * resolution.y;
    o.x = id - o.y * resolution.x - o.z * resolution.x * resolution.y;

    return o;
}

uint id3Dto1D(uint3 id, uint3 resolution)
{
    return clamp(id.x, 0, resolution.x - 1) + clamp(id.y, 0, resolution.y - 1) * resolution.x + clamp(id.z, 0, resolution.z - 1) * resolution.x * resolution.y;
}


[numthreads(16,1,1)]
void CollectValues(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;

    if (index >= _TotalCount)
        return;

    int3 cellCount = (ceil(_SimulationSpace / _HashCellSize));

    int3 cellId = id1Dto3D(index, cellCount);
    
    float3 pos = ((cellId + 0.5) / (cellCount) * 1 - 0.5) * _SimulationSpace + floor(_SimulationCenter / _HashCellSize) * _HashCellSize; 
    
    // Neighborhood Search using Spatial Hash Grids
    int3 originCell = GetCell3D(pos, _HashCellSize);
    
    
    uint hashCell = HashCell3D(originCell);
    uint key = KeyFromHash(hashCell, _ParticleCount);
    uint currIndex = _SpatialOffsets[key];

    uint count = 0;
    ParticleCell cell = (ParticleCell)0;
    
    while (currIndex < _ParticleCount)
    {
        uint3 indexData = _SpatialIndices[currIndex];
        currIndex++;
        // Exit if no longer looking at correct bin
        if (indexData[2] != key)
            break;
		// Skip if hash does not match
        if (indexData[1] != hashCell)
            continue;
        
        uint neighborIndex = indexData[0];
        float3 particlePos = _ParticlePositionBuffer[neighborIndex]; 

        int3 cellDiff = GetCell3D(particlePos, _HashCellSize) - originCell;
        
        if (dot(cellDiff, cellDiff) != 0)
            continue;

        float3 particleOldPos = _ParticleOldPositionBuffer[neighborIndex];
        float3 velocity = (particlePos - particleOldPos) / _DeltaTime;
        float4 data = _ParticleDataBuffer[neighborIndex];
        
        cell.position += particlePos;
        cell.velocity += velocity;
        cell.data += data;
        
        cell.count++;
    }

    if (cell.count > 0)
    {
        cell.position /= cell.count;
        cell.velocity /= cell.count;
        cell.data /= cell.count;
    }
    
    _CellBuffer[index] = cell;
}
