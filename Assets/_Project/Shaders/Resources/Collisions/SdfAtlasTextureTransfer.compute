#pragma kernel Clear
#pragma kernel Transfer


#define THREAD_GROUP_SIZE 4

RWTexture3D<float4> _SdfAtlasTexture;
uint3 _SdfAtlasResolution;

Texture3D<float> _SourceTexture;
uint3 _SourceResolution;
uint3 _TransferOffset;


[numthreads(THREAD_GROUP_SIZE,THREAD_GROUP_SIZE,THREAD_GROUP_SIZE)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _SdfAtlasResolution.x || id.y >= _SdfAtlasResolution.y || id.z >= _SdfAtlasResolution.z)
        return;
    _SdfAtlasTexture[id.xyz] = 0;
}


SamplerState sampler_linearClamp;

[numthreads(THREAD_GROUP_SIZE,THREAD_GROUP_SIZE,THREAD_GROUP_SIZE)]
void Transfer (uint3 id : SV_DispatchThreadID)
{
    const uint3 voxel = id + _TransferOffset;
    
    if (id.x >= _SourceResolution.x || id.y >= _SourceResolution.y || id.z >= _SourceResolution.z)
        return;

    if (voxel.x >= _SdfAtlasResolution.x || voxel.y >= _SdfAtlasResolution.y || voxel.z >= _SdfAtlasResolution.z)
        return;

    float dist = _SourceTexture[id];

    float3 samplePos = float3(id.xyz + 0.5) / _SourceResolution.xyz;

    float4 offset = 0;
    offset.xyz = 0.25 / _SourceResolution.xyz;
    
    float distX = _SourceTexture.SampleLevel(sampler_linearClamp, samplePos + offset.xww, 0) - _SourceTexture.SampleLevel(sampler_linearClamp, samplePos - offset.xww, 0);
    float distY = _SourceTexture.SampleLevel(sampler_linearClamp, samplePos + offset.wyw, 0) - _SourceTexture.SampleLevel(sampler_linearClamp, samplePos - offset.wyw, 0);
    float distZ = _SourceTexture.SampleLevel(sampler_linearClamp, samplePos + offset.wwz, 0) - _SourceTexture.SampleLevel(sampler_linearClamp, samplePos - offset.wwz, 0);
    
    
    float3 normal = float3(distX, distY, distZ) / offset.xyz;
    if (dot(normal, normal == 0))
        normal = float3(1, 0, 0);
    normal = normalize(normal);
    
    _SdfAtlasTexture[voxel] = float4(normal, dist);
}